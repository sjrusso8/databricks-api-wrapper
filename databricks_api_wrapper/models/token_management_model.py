# generated by datamodel-codegen:
#   filename:  token-management-2.0-azure.json
#   timestamp: 2022-05-14T13:22:29+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Error(BaseModel):
    error_code: Optional[str] = Field(None, description='Error code')
    message: Optional[str] = Field(
        None,
        description='Human-readable error message that describes the cause of the error.',
    )


class WorkspaceConfObject(BaseModel):
    enableTokensConfig: Optional[bool] = Field(
        None, description='Enable or disable personal access tokens for this workspace.'
    )
    maxTokenLifetimeDays: Optional[str] = Field(
        None,
        description='Maximum token lifetime of new tokens in days, as an integer. If zero, new tokens are permitted to have no lifetime limit. Negative numbers are unsupported. **WARNING:** This limit only applies to new tokens, so there may be tokens with lifetimes longer than this value, including unlimited lifetime. Such tokens may have been created before the current maximum token lifetime was set. To review existing tokens, see the [get tokens API](#operation/get-tokens).',
        example='90',
    )


class Comment(BaseModel):
    __root__: str = Field(
        ...,
        description='Comment that describes the purpose of the token, specified by the token creator.',
        example='This is for the ABC department automation scripts.',
    )


class CreatedById(BaseModel):
    __root__: float = Field(
        ...,
        description='User ID of the user that created the token.[null]',
        example=202480738464078,
    )


class CreatedByUsername(BaseModel):
    __root__: str = Field(
        ...,
        description='Username of the user that created the token.',
        example='jsmith@example.com',
    )


class CreationTime(BaseModel):
    __root__: float = Field(
        ..., description='Timestamp when the token was created', example=1580265020299
    )


class ExpiryTime(BaseModel):
    __root__: float = Field(
        ..., description='Timestamp when the token expires', example=1580265020299
    )


class ObjectId(Enum):
    authorization_tokens = 'authorization/tokens'


class ObjectType(Enum):
    tokens = 'tokens'


class OwnerId(BaseModel):
    __root__: float = Field(
        ...,
        description='User ID of the user that owns the token.[null]',
        example=202480738464078,
    )


class TokenId(BaseModel):
    __root__: str = Field(
        ...,
        description='ID of the token',
        example='5684c955822ac792a51ae2aeb80190f13457bab3e2e2934c133a08b38454816c',
    )


class TokenInfoObject(BaseModel):
    comment: Optional[Comment] = None
    created_by_id: Optional[CreatedById] = None
    created_by_username: Optional[CreatedByUsername] = None
    creation_time: Optional[CreationTime] = None
    expiry_time: Optional[ExpiryTime] = None
    owner_id: Optional[OwnerId] = None
    token_id: Optional[TokenId] = None


class GetTokenManagementResponse(BaseModel):
    token_infos: Optional[List[TokenInfoObject]] = None
