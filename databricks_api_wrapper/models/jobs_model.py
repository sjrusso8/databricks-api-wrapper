# generated by datamodel-codegen:
#   filename:  jobs-2.1-azure.yaml
#   timestamp: 2022-05-14T12:55:52+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field, constr


class ClusterInstance(BaseModel):
    cluster_id: Optional[str] = Field(
        None,
        description='The canonical identifier for the cluster used by a run. This field is always available for runs on existing clusters. For runs on new clusters, it becomes available once the cluster is created. This value can be used to view logs by browsing to `/#setting/sparkui/$cluster_id/driver-logs`. The logs continue to be available after the run completes.\n\nThe response won’t include this field if the identifier is not available yet.',
        example='0923-164208-meows279',
    )
    spark_context_id: Optional[str] = Field(
        None,
        description='The canonical identifier for the Spark context used by a run. This field is filled in once the run begins execution. This value can be used to view the Spark UI by browsing to `/#setting/sparkui/$cluster_id/$spark_context_id`. The Spark UI continues to be available after the run has completed.\n\nThe response won’t include this field if the identifier is not available yet.',
    )


class PauseStatus(Enum):
    PAUSED = 'PAUSED'
    UNPAUSED = 'UNPAUSED'


class CronSchedule(BaseModel):
    quartz_cron_expression: str = Field(
        ...,
        description='A Cron expression using Quartz syntax that describes the schedule for a job. See [Cron Trigger](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for details. This field is required.',
        example='20 30 * * * ?',
    )
    timezone_id: str = Field(
        ...,
        description='A Java timezone ID. The schedule for a job is resolved with respect to this timezone. See [Java TimeZone](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html) for details. This field is required.',
        example='Europe/London',
    )
    pause_status: Optional[PauseStatus] = Field(
        None,
        description='Indicate whether this schedule is paused or not.',
        example='PAUSED',
    )


class GitProvider(Enum):
    gitHub = 'gitHub'
    bitbucketCloud = 'bitbucketCloud'
    azureDevOpsServices = 'azureDevOpsServices'
    gitHubEnterprise = 'gitHubEnterprise'
    bitbucketServer = 'bitbucketServer'
    gitLab = 'gitLab'
    gitLabEnterpriseEdition = 'gitLabEnterpriseEdition'
    awsCodeCommit = 'awsCodeCommit'


class GitSnapshot(BaseModel):
    used_commit: Optional[str] = Field(
        None,
        description='Commit that was used to execute the run. If git_branch was specified, this points to the HEAD of the branch at the time of the run; if git_tag was specified, this points to the commit the tag points to.',
        example='4506fdf41e9fa98090570a34df7a5bce163ff15f',
    )


class JobEmailNotifications(BaseModel):
    on_start: Optional[List[str]] = Field(
        None,
        description='A list of email addresses to be notified when a run begins. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent.',
        example=['user.name@databricks.com'],
    )
    on_success: Optional[List[str]] = Field(
        None,
        description='A list of email addresses to be notified when a run successfully completes. A run is considered to have completed successfully if it ends with a `TERMINATED` `life_cycle_state` and a `SUCCESSFUL` result_state. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent.',
        example=['user.name@databricks.com'],
    )
    on_failure: Optional[List[str]] = Field(
        None,
        description='A list of email addresses to be notified when a run unsuccessfully completes. A run is considered to have completed unsuccessfully if it ends with an `INTERNAL_ERROR` `life_cycle_state` or a `SKIPPED`, `FAILED`, or `TIMED_OUT` result_state. If this is not specified on job creation, reset, or update the list is empty, and notifications are not sent.',
        example=['user.name@databricks.com'],
    )
    no_alert_for_skipped_runs: Optional[bool] = Field(
        None,
        description='If true, do not send email to recipients specified in `on_failure` if the run is skipped.',
        example=False,
    )


class Format(Enum):
    SINGLE_TASK = 'SINGLE_TASK'
    MULTI_TASK = 'MULTI_TASK'


class TaskKey(BaseModel):
    __root__: constr(regex=r'^[\w\-]+$', min_length=1, max_length=100) = Field(
        ...,
        description='A unique name for the task. This field is used to refer to this task from other tasks.\nThis field is required and must be unique within its parent job.\nOn Update or Reset, this field is used to reference the tasks to be updated or reset.\nThe maximum length is 100 characters.',
        example='Task_Key',
    )


class TaskDependency(BaseModel):
    task_key: Optional[str] = None


class TaskDependencies(BaseModel):
    __root__: List[TaskDependency] = Field(
        ...,
        description='An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task.\nThe key is `task_key`, and the value is the name assigned to the dependent task.\nThis field is required when a job consists of more than one task.',
        example=[{'task_key': 'Previous_Task_Key'}, {'task_key': 'Other_Task_Key'}],
    )


class TaskDescription(BaseModel):
    __root__: constr(max_length=4096) = Field(
        ...,
        description='An optional description for this task.\nThe maximum length is 4096 bytes.',
        example='This is the description for this task.',
    )


class NotebookOutput(BaseModel):
    result: Optional[str] = Field(
        None,
        description='The value passed to [dbutils.notebook.exit()](https://docs.microsoft.com/azure/databricks/notebooks/notebook-workflows#notebook-workflows-exit). Azure Databricks restricts this API to return the first 5 MB of the value. For a larger result, your job can store the results in a cloud storage service. This field is absent if `dbutils.notebook.exit()` was never called.',
        example='An arbitrary string passed by calling dbutils.notebook.exit(...)',
    )
    truncated: Optional[bool] = Field(
        None, description='Whether or not the result was truncated.', example=False
    )


class NotebookTask(BaseModel):
    notebook_path: str = Field(
        ...,
        description='The path of the notebook to be run in the Azure Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.',
        example='/Users/user.name@databricks.com/notebook_to_run',
    )
    base_parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Base parameters to be used for each run of this job. If the run is initiated by a call to [`run-now`](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/jobs#operation/JobsRunNow) with parameters specified, the two parameters maps are merged. If the same key is specified in `base_parameters` and in `run-now`, the value from `run-now` is used.\n\nUse [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.\n\nIf the notebook takes a parameter that is not specified in the job’s `base_parameters` or the `run-now` override parameters, the default value from the notebook is used.\n\nRetrieve these parameters in a notebook using [dbutils.widgets.get](https://docs.microsoft.com/azure/databricks/dev-tools/databricks-utils#dbutils-widgets).',
        example={'name': 'John Doe', 'age': 35},
    )


class RunType(Enum):
    JOB_RUN = 'JOB_RUN'
    WORKFLOW_RUN = 'WORKFLOW_RUN'
    SUBMIT_RUN = 'SUBMIT_RUN'


class RunParameters(BaseModel):
    jar_params: Optional[List[str]] = Field(
        None,
        description='A list of parameters for jobs with Spark JAR tasks, for example `"jar_params": ["john doe", "35"]`. The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon `run-now`, it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example `{"jar_params":["john doe","35"]}`) cannot exceed 10,000 bytes.\n\nUse [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.',
        example=['john', 'doe', '35'],
    )
    notebook_params: Optional[Dict[str, Any]] = Field(
        None,
        description='A map from keys to values for jobs with notebook task, for example `"notebook_params": {"name": "john doe", "age": "35"}`. The map is passed to the notebook and is accessible through the [dbutils.widgets.get](https://docs.microsoft.com/azure/databricks/dev-tools/databricks-utils#dbutils-widgets) function.\n\nIf not specified upon `run-now`, the triggered run uses the job’s base parameters.\n\nnotebook_params cannot be specified in conjunction with jar_params.\n\nUse [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.\n\nThe JSON representation of this field (for example `{"notebook_params":{"name":"john doe","age":"35"}}`) cannot exceed 10,000 bytes.',
        example={'name': 'john doe', 'age': '35'},
    )
    python_params: Optional[List[str]] = Field(
        None,
        description='A list of parameters for jobs with Python tasks, for example `"python_params": ["john doe", "35"]`. The parameters are passed to Python file as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{"python_params":["john doe","35"]}`) cannot exceed 10,000 bytes.\n\nUse [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.\n\nImportant\n\nThese parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.',
        example=['john doe', '35'],
    )
    spark_submit_params: Optional[List[str]] = Field(
        None,
        description='A list of parameters for jobs with spark submit task, for example `"spark_submit_params": ["--class", "org.apache.spark.examples.SparkPi"]`. The parameters are passed to spark-submit script as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{"python_params":["john doe","35"]}`) cannot exceed 10,000 bytes.\n\nUse [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.\n\nImportant\n\nThese parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.',
        example=['--class', 'org.apache.spark.examples.SparkPi'],
    )
    python_named_params: Optional[Dict[str, Any]] = Field(
        None,
        description='A map from keys to values for jobs with Python wheel task, for example `"python_named_params": {"name": "task", "data": "dbfs:/path/to/data.json"}`.',
        example={'name': 'task', 'data': 'dbfs:/path/to/data.json'},
    )


class SparkJarTask(BaseModel):
    main_class_name: Optional[str] = Field(
        None,
        description='The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library.\n\nThe code must use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job fail.',
        example='com.databricks.ComputeModels',
    )
    parameters: Optional[List[str]] = Field(
        None,
        description='Parameters passed to the main method.\n\nUse [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.',
        example=['--data', 'dbfs:/path/to/data.json'],
    )
    jar_uri: Optional[str] = Field(
        None,
        description='Deprecated since 04/2016\\. Provide a `jar` through the `libraries` field instead. For an example, see [Create](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/jobs#operation/JobsCreate).',
    )


class SparkPythonTask(BaseModel):
    python_file: str = Field(
        ...,
        description='The URI of the Python file to be executed. DBFS paths are supported. This field is required.',
        example='dbfs:/path/to/file.py',
    )
    parameters: Optional[List[str]] = Field(
        None,
        description='Command line parameters passed to the Python file.\n\nUse [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.',
        example=['--data', 'dbfs:/path/to/data.json'],
    )


class SparkSubmitTask(BaseModel):
    parameters: Optional[List[str]] = Field(
        None,
        description='Command-line parameters passed to spark submit.\n\nUse [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.',
        example=[
            '--class',
            'org.apache.spark.examples.SparkPi',
            'dbfs:/path/to/examples.jar',
            '10',
        ],
    )


class PipelineTask(BaseModel):
    pipeline_id: Optional[str] = Field(
        None,
        description='The full name of the pipeline task to execute.',
        example='a12cd3e4-0ab1-1abc-1a2b-1a2bcd3e4fg5',
    )


class PythonWheelTask(BaseModel):
    package_name: Optional[str] = Field(
        None, description='Name of the package to execute'
    )
    entry_point: Optional[str] = Field(
        None,
        description='Named entry point to use, if it does not exist in the metadata of the package it executes the function from the package directly using `$packageName.$entryPoint()`',
    )
    parameters: Optional[List[str]] = Field(
        None,
        description='Command-line parameters passed to Python wheel task. Leave it empty if `named_parameters` is not null.',
        example=['--name=task', 'one', 'two'],
    )
    named_parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Command-line parameters passed to Python wheel task in the form of `["--name=task", "--data=dbfs:/path/to/data.json"]`. Leave it empty if `parameters` is not null.',
        example={'name': 'task', 'data': 'dbfs:/path/to/data.json'},
    )


class RunLifeCycleState(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    TERMINATING = 'TERMINATING'
    TERMINATED = 'TERMINATED'
    SKIPPED = 'SKIPPED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class RunResultState(Enum):
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TIMEDOUT = 'TIMEDOUT'
    CANCELED = 'CANCELED'


class TriggerType(Enum):
    PERIODIC = 'PERIODIC'
    ONE_TIME = 'ONE_TIME'
    RETRY = 'RETRY'


class ViewType(Enum):
    NOTEBOOK = 'NOTEBOOK'
    DASHBOARD = 'DASHBOARD'


class ViewsToExport(Enum):
    CODE = 'CODE'
    DASHBOARDS = 'DASHBOARDS'
    ALL = 'ALL'


class AutoScale(BaseModel):
    min_workers: Optional[int] = Field(
        None,
        description='The minimum number of workers to which the cluster can scale down when underutilized. It is also the initial number of workers the cluster has after creation.',
    )
    max_workers: Optional[int] = Field(
        None,
        description='The maximum number of workers to which the cluster can scale up when overloaded. max_workers must be strictly greater than min_workers.',
    )


class ClusterEventType(Enum):
    CREATING = 'CREATING'
    DID_NOT_EXPAND_DISK = 'DID_NOT_EXPAND_DISK'
    EXPANDED_DISK = 'EXPANDED_DISK'
    FAILED_TO_EXPAND_DISK = 'FAILED_TO_EXPAND_DISK'
    INIT_SCRIPTS_STARTING = 'INIT_SCRIPTS_STARTING'
    INIT_SCRIPTS_FINISHED = 'INIT_SCRIPTS_FINISHED'
    STARTING = 'STARTING'
    RESTARTING = 'RESTARTING'
    TERMINATING = 'TERMINATING'
    EDITED = 'EDITED'
    RUNNING = 'RUNNING'
    RESIZING = 'RESIZING'
    UPSIZE_COMPLETED = 'UPSIZE_COMPLETED'
    NODES_LOST = 'NODES_LOST'
    DRIVER_HEALTHY = 'DRIVER_HEALTHY'
    DRIVER_UNAVAILABLE = 'DRIVER_UNAVAILABLE'
    SPARK_EXCEPTION = 'SPARK_EXCEPTION'
    DRIVER_NOT_RESPONDING = 'DRIVER_NOT_RESPONDING'
    DBFS_DOWN = 'DBFS_DOWN'
    METASTORE_DOWN = 'METASTORE_DOWN'
    NODE_BLACKLISTED = 'NODE_BLACKLISTED'
    PINNED = 'PINNED'
    UNPINNED = 'UNPINNED'


class Availability(Enum):
    SPOT_AZURE = 'SPOT_AZURE'
    ON_DEMAND_AZURE = 'ON_DEMAND_AZURE'
    SPOT_WITH_FALLBACK_AZURE = 'SPOT_WITH_FALLBACK_AZURE'


class AzureAttributes(BaseModel):
    first_on_demand: Optional[int] = Field(
        None,
        description='The first `first_on_demand` nodes of the cluster are placed on on-demand instances. This value must be greater than 0, or else cluster creation validation fails. If this value is greater than or equal to the current cluster size, all nodes are placed on on-demand instances. If this value is less than the current cluster size, `first_on_demand` nodes are placed on on-demand instances and the remainder are placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster.',
    )
    availability: Optional[Availability] = Field(
        None,
        description='Availability type used for all subsequent nodes past the `first_on_demand` ones.\n\n`SPOT_AZURE`: use spot instances.\n`ON_DEMAND_AZURE`: use on demand instances.\n`SPOT_WITH_FALLBACK_AZURE`: preferably use spot instances, but fall back to on-demand instances if spot instances cannot be acquired (for example, if Azure spot prices are too high or out of quota). Does not apply to pool availability.',
    )
    spot_bid_max_price: Optional[float] = Field(
        None,
        description='The max bid price used for Azure spot instances. You can set this to greater than or equal to the current spot price. You can also set this to -1 (the default), which specifies that the instance cannot be evicted on the basis of price. The price for the instance is the current price for spot instances or the price for a standard instance. You can view historical pricing and eviction rates in the Azure portal.',
    )


class ClusterSize(BaseModel):
    num_workers: Optional[int] = Field(
        None,
        description='If num_workers, number of worker nodes that this cluster must have. A cluster has one Spark driver and num_workers executors for a total of num_workers + 1 Spark nodes. When reading the properties of a cluster, this field reflects the desired number of workers rather than the actual number of workers. For instance, if a cluster is resized from 5 to 10 workers, this field is updated to reflect the target size of 10 workers, whereas the workers listed in executors gradually increase from 5 to 10 as the new nodes are provisioned.',
    )
    autoscale: Optional[AutoScale] = Field(
        None,
        description='If autoscale, parameters needed in order to automatically scale clusters up and down based on load.',
    )


class ListOrder(Enum):
    DESC = 'DESC'
    ASC = 'ASC'


class ResizeCause(Enum):
    AUTOSCALE = 'AUTOSCALE'
    USER_REQUEST = 'USER_REQUEST'
    AUTORECOVERY = 'AUTORECOVERY'


class ClusterTag(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class DbfsStorageInfo(BaseModel):
    destination: Optional[str] = Field(
        None, description='DBFS destination. Example: `dbfs:/my/path`'
    )


class FileStorageInfo(BaseModel):
    destination: Optional[str] = Field(
        None, description='File destination. Example: `file:/my/file.sh`'
    )


class DockerBasicAuth(BaseModel):
    username: Optional[str] = Field(
        None, description='User name for the Docker repository.'
    )
    password: Optional[str] = Field(
        None, description='Password for the Docker repository.'
    )


class LogSyncStatus(BaseModel):
    last_attempted: Optional[int] = Field(
        None,
        description='The timestamp of last attempt. If the last attempt fails, last_exception contains the exception in the last attempt.',
    )
    last_exception: Optional[str] = Field(
        None,
        description='The exception thrown in the last attempt, it would be null (omitted in the response) if there is no exception in last attempted.',
    )


class ClusterCloudProviderNodeStatus(Enum):
    NotEnabledOnSubscription = 'NotEnabledOnSubscription'
    NotAvailableInRegion = 'NotAvailableInRegion'


class ParameterPair(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class SparkConfPair(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class SparkEnvPair(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class SparkNode(BaseModel):
    private_ip: Optional[str] = Field(
        None,
        description='Private IP address (typically a 10.x.x.x address) of the Spark node. This is different from the private IP address of the host instance.',
    )
    public_dns: Optional[str] = Field(
        None,
        description='Public DNS address of this node. This address can be used to access the Spark JDBC server on the driver node.',
    )
    node_id: Optional[str] = Field(
        None, description='Globally unique identifier for this node.'
    )
    instance_id: Optional[str] = Field(
        None,
        description='Globally unique identifier for the host instance from the cloud provider.',
    )
    start_timestamp: Optional[int] = Field(
        None,
        description='The timestamp (in millisecond) when the Spark node is launched.',
    )
    host_private_ip: Optional[str] = Field(
        None, description='The private IP address of the host instance.'
    )


class SparkVersion(BaseModel):
    key: Optional[str] = Field(
        None,
        description='[Databricks Runtime version](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/index#programmatic-version) key, for example `7.3.x-scala2.12`. The value that must be provided as the `spark_version` when creating a new cluster. The exact runtime version may change over time for a “wildcard” version (that is, `7.3.x-scala2.12` is a “wildcard” version) with minor bug fixes.',
    )
    name: Optional[str] = Field(
        None,
        description='A descriptive name for the runtime version, for example “Databricks Runtime 7.3 LTS”.',
    )


class PoolClusterTerminationCode(Enum):
    INSTANCE_POOL_MAX_CAPACITY_FAILURE = 'INSTANCE_POOL_MAX_CAPACITY_FAILURE'
    INSTANCE_POOL_NOT_FOUND_FAILURE = 'INSTANCE_POOL_NOT_FOUND_FAILURE'


class ClusterSource(Enum):
    UI = 'UI'
    JOB = 'JOB'
    API = 'API'


class ClusterState(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    RESTARTING = 'RESTARTING'
    RESIZING = 'RESIZING'
    TERMINATING = 'TERMINATING'
    TERMINATED = 'TERMINATED'
    ERROR = 'ERROR'
    UNKNOWN = 'UNKNOWN'


class TerminationCode(Enum):
    USER_REQUEST = 'USER_REQUEST'
    JOB_FINISHED = 'JOB_FINISHED'
    INACTIVITY = 'INACTIVITY'
    CLOUD_PROVIDER_SHUTDOWN = 'CLOUD_PROVIDER_SHUTDOWN'
    COMMUNICATION_LOST = 'COMMUNICATION_LOST'
    CLOUD_PROVIDER_LAUNCH_FAILURE = 'CLOUD_PROVIDER_LAUNCH_FAILURE'
    SPARK_STARTUP_FAILURE = 'SPARK_STARTUP_FAILURE'
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    UNEXPECTED_LAUNCH_FAILURE = 'UNEXPECTED_LAUNCH_FAILURE'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    SPARK_ERROR = 'SPARK_ERROR'
    METASTORE_COMPONENT_UNHEALTHY = 'METASTORE_COMPONENT_UNHEALTHY'
    DBFS_COMPONENT_UNHEALTHY = 'DBFS_COMPONENT_UNHEALTHY'
    AZURE_RESOURCE_PROVIDER_THROTTLING = 'AZURE_RESOURCE_PROVIDER_THROTTLING'
    AZURE_RESOURCE_MANAGER_THROTTLING = 'AZURE_RESOURCE_MANAGER_THROTTLING'
    NETWORK_CONFIGURATION_FAILURE = 'NETWORK_CONFIGURATION_FAILURE'
    DRIVER_UNREACHABLE = 'DRIVER_UNREACHABLE'
    DRIVER_UNRESPONSIVE = 'DRIVER_UNRESPONSIVE'
    INSTANCE_UNREACHABLE = 'INSTANCE_UNREACHABLE'
    CONTAINER_LAUNCH_FAILURE = 'CONTAINER_LAUNCH_FAILURE'
    INSTANCE_POOL_CLUSTER_FAILURE = 'INSTANCE_POOL_CLUSTER_FAILURE'
    REQUEST_REJECTED = 'REQUEST_REJECTED'
    INIT_SCRIPT_FAILURE = 'INIT_SCRIPT_FAILURE'
    TRIAL_EXPIRED = 'TRIAL_EXPIRED'


class TerminationType(Enum):
    SUCCESS = 'SUCCESS'
    CLIENT_ERROR = 'CLIENT_ERROR'
    SERVICE_FAULT = 'SERVICE_FAULT'
    CLOUD_FAILURE = 'CLOUD_FAILURE'


class TerminationParameter(BaseModel):
    username: Optional[str] = Field(
        None, description='The username of the user who terminated the cluster.'
    )
    azure_error_code: Optional[str] = Field(
        None,
        description='The Azure provided error code describing why cluster nodes could not be provisioned. For reference, see: [https://docs.microsoft.com/azure/virtual-machines/windows/error-messages](https://docs.microsoft.com/azure/virtual-machines/windows/error-messages).',
    )
    azure_error_message: Optional[str] = Field(
        None,
        description='Human-readable context of various failures from Azure. This field is unstructured, and its exact format is subject to change.',
    )
    databricks_error_message: Optional[str] = Field(
        None,
        description='Additional context that may explain the reason for cluster termination. This field is unstructured, and its exact format is subject to change.',
    )
    inactivity_duration_min: Optional[str] = Field(
        None,
        description='An idle cluster was shut down after being inactive for this duration.',
    )
    instance_id: Optional[str] = Field(
        None, description='The ID of the instance that was hosting the Spark driver.'
    )
    instance_pool_id: Optional[str] = Field(
        None, description='The ID of the instance pool the cluster is using.'
    )
    instance_pool_error_code: Optional[str] = Field(
        None,
        description='The [error code](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/clusters#clusterterminationreasonpoolclusterterminationcode) for cluster failures specific to a pool.',
    )


class MavenLibrary(BaseModel):
    coordinates: str = Field(
        ...,
        description='Gradle-style Maven coordinates. For example: `org.jsoup:jsoup:1.7.2`. This field is required.',
        example='org.jsoup:jsoup:1.7.2',
    )
    repo: Optional[str] = Field(
        None,
        description='Maven repo to install the Maven package from. If omitted, both Maven Central Repository and Spark Packages are searched.',
        example='https://my-repo.com',
    )
    exclusions: Optional[List[str]] = Field(
        None,
        description='List of dependences to exclude. For example: `["slf4j:slf4j", "*:hadoop-client"]`.\n\nMaven dependency exclusions: <https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html>.',
        example=['slf4j:slf4j', '*:hadoop-client'],
    )


class PythonPyPiLibrary(BaseModel):
    package: str = Field(
        ...,
        description='The name of the PyPI package to install. An optional exact version specification is also supported. Examples: `simplejson` and `simplejson==3.8.0`. This field is required.',
        example='simplejson==3.8.0',
    )
    repo: Optional[str] = Field(
        None,
        description='The repository where the package can be found. If not specified, the default pip index is used.',
        example='https://my-repo.com',
    )


class RCranLibrary(BaseModel):
    package: str = Field(
        ...,
        description='The name of the CRAN package to install. This field is required.',
        example='geojson',
    )
    repo: Optional[str] = Field(
        None,
        description='The repository where the package can be found. If not specified, the default CRAN repo is used.',
        example='https://my-repo.com',
    )


class LibraryInstallStatus(Enum):
    PENDING = 'PENDING'
    RESOLVING = 'RESOLVING'
    INSTALLING = 'INSTALLING'
    INSTALLED = 'INSTALLED'
    SKIPPED = 'SKIPPED'
    FAILED = 'FAILED'
    UNINSTALL_ON_RESTART = 'UNINSTALL_ON_RESTART'


class Error(BaseModel):
    error_code: Optional[str] = Field(
        None, description='Error code', example='INTERNAL_ERROR'
    )
    message: Optional[str] = Field(
        None,
        description='Human-readable error message that describes the cause of the error.',
        example='Unexpected error.',
    )


class UserName(BaseModel):
    __root__: str = Field(
        ..., description='Email address for the user.', example='jsmith@example.com'
    )


class GroupName(BaseModel):
    __root__: str = Field(
        ...,
        description='Group name. There are two built-in groups: `users` for all users, and `admins` for administrators.',
        example='users',
    )


class ServicePrincipalName(BaseModel):
    __root__: str = Field(
        ...,
        description='Name of an Azure service principal.',
        example='9f0621ee-b52b-11ea-b3de-0242ac130004',
    )


class CanManage(Enum):
    CAN_MANAGE = 'CAN_MANAGE'


class CanManageRun(Enum):
    CAN_MANAGE_RUN = 'CAN_MANAGE_RUN'


class CanView(Enum):
    CAN_VIEW = 'CAN_VIEW'


class IsOwner(Enum):
    IS_OWNER = 'IS_OWNER'


class RunNowInput(BaseModel):
    job_id: Optional[int] = Field(
        None, description='The ID of the job to be executed', example=11223344
    )
    idempotency_token: Optional[str] = Field(
        None,
        description='An optional token to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead.\n\nIf you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token.\n\nThis token must have at most 64 characters.\n\nFor more information, see [How to ensure idempotency for jobs](https://docs.microsoft.com/azure/databricks/kb/jobs/jobs-idempotency).',
        example='8f018174-4792-40d5-bcbc-3e6a527352c8',
    )


class RepairRunInput(BaseModel):
    run_id: Optional[int] = Field(
        None,
        description='The job run ID of the run to repair. The run must not be in progress.',
        example=455644833,
    )
    rerun_tasks: Optional[List[str]] = Field(
        None,
        description='The task keys of the task runs to repair.',
        example=['task0', 'task1'],
    )
    latest_repair_id: Optional[int] = Field(
        None,
        description='The ID of the latest repair. This parameter is not required when repairing a run for the first time, but must be provided on subsequent requests to repair the same run.',
        example=734650698524280,
    )


class Type(Enum):
    ORIGINAL = 'ORIGINAL'
    REPAIR = 'REPAIR'


class GitSource(BaseModel):
    git_url: Optional[str] = Field(
        None,
        description='URL of the repository to be cloned by this job.\nThe maximum length is 300 characters.',
        example='https://github.com/databricks/databricks-cli',
    )
    git_provider: Optional[GitProvider] = Field(
        None,
        description='Unique identifier of the service used to host the Git repository. The value is case insensitive.',
        example='github',
    )
    git_branch: Optional[str] = Field(
        None,
        description='Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit.\nThe maximum length is 255 characters.',
        example='main',
    )
    git_tag: Optional[str] = Field(
        None,
        description='Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit.\nThe maximum length is 255 characters.',
        example='release-1.0.0',
    )
    git_commit: Optional[str] = Field(
        None,
        description='Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag.\nThe maximum length is 64 characters.',
        example='e0056d01',
    )
    git_snapshot: Optional[GitSnapshot] = None


class GitSource1(BaseModel):
    __root__: Union[GitSource, Any, Any, Any] = Field(
        ...,
        description="This functionality is in Public Preview.\n\nAn optional specification for a remote repository containing the notebooks used by this job's notebook tasks.",
    )


class JobTask(BaseModel):
    notebook_task: Optional[NotebookTask] = Field(
        None,
        description='If notebook_task, indicates that this job must run a notebook. This field may not be specified in conjunction with spark_jar_task.',
    )
    spark_jar_task: Optional[SparkJarTask] = Field(
        None,
        description='If spark_jar_task, indicates that this job must run a JAR.',
        example='',
    )
    spark_python_task: Optional[SparkPythonTask] = Field(
        None,
        description='If spark_python_task, indicates that this job must run a Python file.',
    )
    spark_submit_task: Optional[SparkSubmitTask] = Field(
        None,
        description='If spark_submit_task, indicates that this job must be launched by the spark submit script.',
    )
    pipeline_task: Optional[PipelineTask] = Field(
        None,
        description='If pipeline_task, indicates that this job must execute a Pipeline.',
    )
    python_wheel_task: Optional[PythonWheelTask] = Field(
        None,
        description='If python_wheel_task, indicates that this job must execute a PythonWheel.',
    )


class RunState(BaseModel):
    life_cycle_state: Optional[RunLifeCycleState] = Field(
        None,
        description='A description of a run’s current location in the run lifecycle. This field is always available in the response.',
    )
    result_state: Optional[RunResultState] = None
    user_cancelled_or_timedout: Optional[bool] = Field(
        None,
        description='Whether a run was canceled manually by a user or by the scheduler because the run timed out.',
        example=False,
    )
    state_message: Optional[str] = Field(
        None,
        description='A descriptive message for the current state. This field is unstructured, and its exact format is subject to change.',
        example='',
    )


class ViewItem(BaseModel):
    content: Optional[str] = Field(None, description='Content of the view.')
    name: Optional[str] = Field(
        None,
        description='Name of the view item. In the case of code view, it would be the notebook’s name. In the case of dashboard view, it would be the dashboard’s name.',
    )
    type: Optional[ViewType] = Field(None, description='Type of the view item.')


class ClusterLogConf(BaseModel):
    dbfs: Optional[DbfsStorageInfo] = Field(
        None,
        description='DBFS location of cluster log. Destination must be provided. For example, `{ "dbfs" : { "destination" : "dbfs:/home/cluster_log" } }`',
    )


class InitScriptInfo(BaseModel):
    dbfs: Optional[DbfsStorageInfo] = Field(
        None,
        description='DBFS location of init script. Destination must be provided. For example, `{ "dbfs" : { "destination" : "dbfs:/home/init_script" } }`',
    )
    file: Optional[FileStorageInfo] = Field(
        None,
        description='File location of init script. Destination must be provided. For example, `{ "file" : { "destination" : "file:/my/local/file.sh" } }`',
    )


class DockerImage(BaseModel):
    url: Optional[str] = Field(None, description='URL for the Docker image.')
    basic_auth: Optional[DockerBasicAuth] = Field(
        None, description='Basic authentication information for Docker repository.'
    )


class ClusterCloudProviderNodeInfo(BaseModel):
    status: Optional[ClusterCloudProviderNodeStatus] = Field(
        None, description='Status as reported by the cloud provider.'
    )
    available_core_quota: Optional[int] = Field(
        None, description='Available CPU core quota.'
    )
    total_core_quota: Optional[int] = Field(None, description='Total CPU core quota.')


class TerminationReason(BaseModel):
    code: Optional[TerminationCode] = Field(
        None, description='Status code indicating why a cluster was terminated.'
    )
    type: Optional[TerminationType] = Field(
        None, description='Reason indicating why a cluster was terminated.'
    )
    parameters: Optional[ParameterPair] = Field(
        None,
        description='Object containing a set of parameters that provide information about why a cluster was terminated.',
    )


class Library(BaseModel):
    jar: Optional[str] = Field(
        None,
        description='If jar, URI of the JAR to be installed. DBFS and ADLS (`abfss`) URIs are supported. For example: `{ "jar": "dbfs:/mnt/databricks/library.jar" }` or `{ "jar": "abfss://my-bucket/library.jar" }`. If ADLS is used, make sure the cluster has read access on the library.',
        example='dbfs:/my-jar.jar',
    )
    egg: Optional[str] = Field(
        None,
        description='If egg, URI of the egg to be installed. DBFS and ADLS URIs are supported. For example: `{ "egg": "dbfs:/my/egg" }` or `{ "egg": "abfss://my-bucket/egg" }`.',
        example='dbfs:/my/egg',
    )
    whl: Optional[str] = Field(
        None,
        description='If whl, URI of the wheel or zipped wheels to be installed. DBFS and ADLS URIs are supported. For example: `{ "whl": "dbfs:/my/whl" }` or `{ "whl": "abfss://my-bucket/whl" }`. If ADLS is used, make sure the cluster has read access on the library. Also the wheel file name needs to use the [correct convention](https://www.python.org/dev/peps/pep-0427/#file-format). If zipped wheels are to be installed, the file name suffix should be `.wheelhouse.zip`.',
        example='dbfs:/my/whl',
    )
    pypi: Optional[PythonPyPiLibrary] = Field(
        None,
        description='If pypi, specification of a PyPI library to be installed. Specifying the `repo` field is optional and if not specified, the default pip index is used. For example: `{ "package": "simplejson", "repo": "https://my-repo.com" }`',
    )
    maven: Optional[MavenLibrary] = Field(
        None,
        description='If maven, specification of a Maven library to be installed. For example: `{ "coordinates": "org.jsoup:jsoup:1.7.2" }`',
    )
    cran: Optional[RCranLibrary] = Field(
        None, description='If cran, specification of a CRAN library to be installed.'
    )


class LibraryFullStatus(BaseModel):
    library: Optional[Library] = Field(
        None, description='Unique identifier for the library.'
    )
    status: Optional[LibraryInstallStatus] = Field(
        None, description='Status of installing the library on the cluster.'
    )
    messages: Optional[List[str]] = Field(
        None,
        description='All the info and warning messages that have occurred so far for this library.',
    )
    is_library_for_all_clusters: Optional[bool] = Field(
        None,
        description='Whether the library was set to be installed on all clusters via the libraries UI.',
    )


class PermissionLevel(BaseModel):
    __root__: Union[CanManage, CanManageRun, CanView, IsOwner] = Field(
        ..., description='Permission level to grant.'
    )


class PermissionLevelForGroup(BaseModel):
    __root__: Union[CanManage, CanManageRun, CanView] = Field(
        ..., description='Permission level to grant.'
    )


class RepairHistoryItem(BaseModel):
    type: Optional[Type] = Field(
        None,
        description='The repair history item type. Indicates whether a run is the original run or a repair run.',
    )
    start_time: Optional[int] = Field(
        None, description='The start time of the (repaired) run.', example=1625060460483
    )
    end_time: Optional[int] = Field(
        None, description='The end time of the (repaired) run.', example=1625060863413
    )
    state: Optional[RunState] = None
    id: Optional[int] = Field(
        None,
        description='The ID of the repair. Only returned for the items that represent a repair in `repair_history`.',
        example=734650698524280,
    )
    task_run_ids: Optional[List[int]] = Field(
        None,
        description='The run IDs of the task runs that ran as part of this repair history item.',
        example=[1106460542112844, 988297789683452],
    )


class NewCluster(BaseModel):
    num_workers: Optional[int] = Field(
        None,
        description='If num_workers, number of worker nodes that this cluster must have. A cluster has one Spark driver and num_workers executors for a total of num_workers + 1 Spark nodes. When reading the properties of a cluster, this field reflects the desired number of workers rather than the actual current number of workers. For example, if a cluster is resized from 5 to 10 workers, this field immediately updates to reflect the target size of 10 workers, whereas the workers listed in `spark_info` gradually increase from 5 to 10 as the new nodes are provisioned.',
    )
    autoscale: Optional[AutoScale] = Field(
        None,
        description='If autoscale, the required parameters to automatically scale clusters up and down based on load.',
    )
    spark_version: str = Field(
        ...,
        description='The Spark version of the cluster. A list of available Spark versions can be retrieved by using the [Runtime versions](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/clusters#runtime-versions) API call. This field is required.',
    )
    spark_conf: Optional[SparkConfPair] = Field(
        None,
        description='An object containing a set of optional, user-specified Spark configuration key-value pairs. You can also pass in a string of extra JVM options to the driver and the executors via `spark.driver.extraJavaOptions` and `spark.executor.extraJavaOptions` respectively.\n\nExample Spark confs: `{"spark.speculation": true, "spark.streaming.ui.retainedBatches": 5}` or `{"spark.driver.extraJavaOptions": "-verbose:gc -XX:+PrintGCDetails"}`',
    )
    azure_attributes: Optional[AzureAttributes] = Field(
        None,
        description='Defines attributes such as the instance availability type, node placement, and max bid price. If not specified during cluster creation, a set of default values is used.',
    )
    node_type_id: str = Field(
        ...,
        description='This field encodes, through a single value, the resources available to each of the Spark nodes in this cluster. For example, the Spark nodes can be provisioned and optimized for memory or compute intensive workloads A list of available node types can be retrieved by using the [List node types](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/clusters#list-node-types) API call. This field is required.',
    )
    driver_node_type_id: Optional[str] = Field(
        None,
        description='The node type of the Spark driver. This field is optional; if unset, the driver node type is set as the same value as `node_type_id` defined above.',
    )
    custom_tags: Optional[ClusterTag] = Field(
        None,
        description='An object containing a set of tags for cluster resources. Databricks tags all cluster resources (such as VMs) with these tags in addition to default_tags. **Note**: * Tags are not supported on legacy node types such as compute-optimized and memory-optimized * Databricks allows at most 45 custom tags',
    )
    cluster_log_conf: Optional[ClusterLogConf] = Field(
        None,
        description='The configuration for delivering Spark logs to a long-term storage destination. Only one destination can be specified for one cluster. If the conf is given, the logs are delivered to the destination every `5 mins`. The destination of driver logs is `<destination>/<cluster-id>/driver`, while the destination of executor logs is `<destination>/<cluster-id>/executor`.',
    )
    init_scripts: Optional[List[InitScriptInfo]] = Field(
        None,
        description='The configuration for storing init scripts. Any number of scripts can be specified. The scripts are executed sequentially in the order provided. If `cluster_log_conf` is specified, init script logs are sent to `<destination>/<cluster-id>/init_scripts`.',
    )
    spark_env_vars: Optional[SparkEnvPair] = Field(
        None,
        description='An object containing a set of optional, user-specified environment variable key-value pairs. Key-value pair of the form (X,Y) are exported as is (for example, `export X=\'Y\'`) while launching the driver and workers.\n\nTo specify an additional set of `SPARK_DAEMON_JAVA_OPTS`, we recommend appending them to `$SPARK_DAEMON_JAVA_OPTS` as shown in the following example. This ensures that all default databricks managed environmental variables are included as well.\n\nExample Spark environment variables: `{"SPARK_WORKER_MEMORY": "28000m", "SPARK_LOCAL_DIRS": "/local_disk0"}` or `{"SPARK_DAEMON_JAVA_OPTS": "$SPARK_DAEMON_JAVA_OPTS -Dspark.shuffle.service.enabled=true"}`',
    )
    enable_elastic_disk: Optional[bool] = Field(
        None,
        description='Autoscaling Local Storage: when enabled, this cluster dynamically acquires additional disk space when its Spark workers are running low on disk space. Refer to [Autoscaling local storage](https://docs.microsoft.com/azure/databricks/clusters/configure#autoscaling-local-storage-azure) for details.',
    )
    instance_pool_id: Optional[str] = Field(
        None,
        description='The optional ID of the instance pool to use for cluster nodes. If `driver_instance_pool_id` is present, `instance_pool_id` is used for worker nodes only. Otherwise, it is used for both the driver node and worker nodes. Refer to [Instance Pools API](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/instance-pools) for details.',
    )
    policy_id: Optional[str] = Field(
        None,
        description='A [cluster policy](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/policies) ID.',
    )


class RunTask(BaseModel):
    run_id: Optional[int] = Field(
        None, description='The ID of the task run.', example=99887766
    )
    task_key: Optional[TaskKey] = None
    description: Optional[TaskDescription] = None
    state: Optional[RunState] = Field(
        None, description='The result and lifecycle states of the run.'
    )
    depends_on: Optional[TaskDependencies] = None
    existing_cluster_id: Optional[str] = Field(
        None,
        description='If existing_cluster_id, the ID of an existing cluster that is used for all runs of this job. When running jobs on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.',
    )
    new_cluster: Optional[NewCluster] = Field(
        None,
        description='If new_cluster, a description of a cluster that is created for each run.',
    )
    libraries: Optional[List[Library]] = Field(
        None,
        description='An optional list of libraries to be installed on the cluster that executes the job. The default value is an empty list.',
    )
    notebook_task: Optional[NotebookTask] = Field(
        None,
        description='If notebook_task, indicates that this job must run a notebook. This field may not be specified in conjunction with spark_jar_task.',
    )
    spark_jar_task: Optional[SparkJarTask] = Field(
        None, description='If spark_jar_task, indicates that this job must run a JAR.'
    )
    spark_python_task: Optional[SparkPythonTask] = Field(
        None,
        description='If spark_python_task, indicates that this job must run a Python file.',
    )
    spark_submit_task: Optional[SparkSubmitTask] = Field(
        None,
        description='If spark_submit_task, indicates that this job must be launched by the spark submit script.',
    )
    pipeline_task: Optional[PipelineTask] = Field(
        None,
        description='If pipeline_task, indicates that this job must execute a Pipeline.',
    )
    python_wheel_task: Optional[PythonWheelTask] = Field(
        None,
        description='If python_wheel_task, indicates that this job must execute a PythonWheel.',
    )
    start_time: Optional[int] = Field(
        None,
        description='The time at which this run was started in epoch milliseconds (milliseconds since 1/1/1970 UTC). This may not be the time when the job task starts executing, for example, if the job is scheduled to run on a new cluster, this is the time the cluster creation call is issued.',
        example=1625060460483,
    )
    setup_duration: Optional[int] = Field(
        None,
        description='The time it took to set up the cluster in milliseconds. For runs that run on new clusters this is the cluster creation time, for runs that run on existing clusters this time should be very short.',
        example=0,
    )
    execution_duration: Optional[int] = Field(
        None,
        description='The time in milliseconds it took to execute the commands in the JAR or notebook until they completed, failed, timed out, were cancelled, or encountered an unexpected error.',
        example=0,
    )
    cleanup_duration: Optional[int] = Field(
        None,
        description='The time in milliseconds it took to terminate the cluster and clean up any associated artifacts. The total duration of the run is the sum of the setup_duration, the execution_duration, and the cleanup_duration.',
        example=0,
    )
    end_time: Optional[int] = Field(
        None,
        description='The time at which this run ended in epoch milliseconds (milliseconds since 1/1/1970 UTC). This field is set to 0 if the job is still running.',
        example=1625060863413,
    )
    attempt_number: Optional[int] = Field(
        None,
        description='The sequence number of this run attempt for a triggered job run. The initial attempt of a run has an attempt_number of 0\\. If the initial run attempt fails, and the job has a retry policy (`max_retries` \\> 0), subsequent runs are created with an `original_attempt_run_id` of the original attempt’s ID and an incrementing `attempt_number`. Runs are retried only until they succeed, and the maximum `attempt_number` is the same as the `max_retries` value for the job.',
        example=0,
    )
    cluster_instance: Optional[ClusterInstance] = Field(
        None,
        description='The cluster used for this run. If the run is specified to use a new cluster, this field is set once the Jobs service has requested a cluster for the run.',
    )
    git_source: Optional[GitSource1] = Field(
        None,
        description="This functionality is in Public Preview.\n\nAn optional specification for a remote repository containing the notebooks used by this job's notebook tasks.",
    )


class ClusterInfo(BaseModel):
    num_workers: Optional[int] = Field(
        None,
        description='If num_workers, number of worker nodes that this cluster must have. A cluster has one Spark driver and num_workers executors for a total of num_workers + 1 Spark nodes. **Note:** When reading the properties of a cluster, this field reflects the desired number of workers rather than the actual number of workers. For instance, if a cluster is resized from 5 to 10 workers, this field is immediately updated to reflect the target size of 10 workers, whereas the workers listed in `executors` gradually increase from 5 to 10 as the new nodes are provisioned.',
    )
    autoscale: Optional[AutoScale] = Field(
        None,
        description='If autoscale, parameters needed in order to automatically scale clusters up and down based on load.',
    )
    cluster_id: Optional[str] = Field(
        None,
        description='Canonical identifier for the cluster. This ID is retained during cluster restarts and resizes, while each new cluster has a globally unique ID.',
    )
    creator_user_name: Optional[str] = Field(
        None,
        description='Creator user name. The field won’t be included in the response if the user has already been deleted.',
    )
    driver: Optional[SparkNode] = Field(
        None,
        description='Node on which the Spark driver resides. The driver node contains the Spark master and the Databricks application that manages the per-notebook Spark REPLs.',
    )
    executors: Optional[List[SparkNode]] = Field(
        None, description='Nodes on which the Spark executors reside.'
    )
    spark_context_id: Optional[int] = Field(
        None,
        description='A canonical SparkContext identifier. This value _does_ change when the Spark driver restarts. The pair `(cluster_id, spark_context_id)` is a globally unique identifier over all Spark contexts.',
    )
    jdbc_port: Optional[int] = Field(
        None,
        description='Port on which Spark JDBC server is listening in the driver node. No service listens on this port in executor nodes.',
    )
    cluster_name: Optional[str] = Field(
        None,
        description='Cluster name requested by the user. This doesn’t have to be unique. If not specified at creation, the cluster name is an empty string.',
    )
    spark_version: Optional[str] = Field(
        None,
        description='The runtime version of the cluster. You can retrieve a list of available runtime versions by using the [Runtime versions](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/clusters#runtime-versions) API call.',
    )
    spark_conf: Optional[SparkConfPair] = Field(
        None,
        description='An object containing a set of optional, user-specified Spark configuration key-value pairs. You can also pass in a string of extra JVM options to the driver and the executors via `spark.driver.extraJavaOptions` and `spark.executor.extraJavaOptions` respectively.\n\nExample Spark confs: `{"spark.speculation": true, "spark.streaming.ui.retainedBatches": 5}` or `{"spark.driver.extraJavaOptions": "-verbose:gc -XX:+PrintGCDetails"}`',
    )
    azure_attributes: Optional[AzureAttributes] = Field(
        None,
        description='Defines attributes such as the instance availability type, node placement, and max bid price. If not specified during cluster creation, a set of default values is used.',
    )
    node_type_id: Optional[str] = Field(
        None,
        description='This field encodes, through a single value, the resources available to each of the Spark nodes in this cluster. For example, the Spark nodes can be provisioned and optimized for memory or compute intensive workloads. A list of available node types can be retrieved by using the [List node types](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/clusters#list-node-types) API call.',
    )
    driver_node_type_id: Optional[str] = Field(
        None,
        description='The node type of the Spark driver. This field is optional; if unset, the driver node type is set as the same value as `node_type_id` defined above.',
    )
    custom_tags: Optional[List[ClusterTag]] = Field(
        None,
        description='An object containing a set of tags for cluster resources. Databricks tags all cluster resources (such as VMs) with these tags in addition to default_tags. **Note**: * Tags are not supported on legacy node types such as compute-optimized and memory-optimized * Databricks allows at most 45 custom tags',
    )
    cluster_log_conf: Optional[ClusterLogConf] = Field(
        None,
        description='The configuration for delivering Spark logs to a long-term storage destination. Only one destination can be specified for one cluster. If the conf is given, the logs are delivered to the destination every `5 mins`. The destination of driver logs is `<destination>/<cluster-ID>/driver`, while the destination of executor logs is `<destination>/<cluster-ID>/executor`.',
    )
    init_scripts: Optional[List[InitScriptInfo]] = Field(
        None,
        description='The configuration for storing init scripts. Any number of destinations can be specified. The scripts are executed sequentially in the order provided. If `cluster_log_conf` is specified, init script logs are sent to `<destination>/<cluster-ID>/init_scripts`.',
    )
    docker_image: Optional[DockerImage] = Field(
        None,
        description='Docker image for a [custom container](https://docs.microsoft.com/azure/databricks/clusters/custom-containers).',
    )
    spark_env_vars: Optional[SparkEnvPair] = Field(
        None,
        description='An object containing a set of optional, user-specified environment variable key-value pairs. Key-value pairs of the form (X,Y) are exported as is (that is, `export X=\'Y\'`) while launching the driver and workers.\n\nTo specify an additional set of `SPARK_DAEMON_JAVA_OPTS`, we recommend appending them to `$SPARK_DAEMON_JAVA_OPTS` as shown in the following example. This ensures that all default databricks managed environmental variables are included as well.\n\nExample Spark environment variables: `{"SPARK_WORKER_MEMORY": "28000m", "SPARK_LOCAL_DIRS": "/local_disk0"}` or `{"SPARK_DAEMON_JAVA_OPTS": "$SPARK_DAEMON_JAVA_OPTS -Dspark.shuffle.service.enabled=true"}`',
    )
    autotermination_minutes: Optional[int] = Field(
        None,
        description='Automatically terminates the cluster after it is inactive for this time in minutes. If not set, this cluster is not be automatically terminated. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination.',
    )
    enable_elastic_disk: Optional[bool] = Field(
        None,
        description='Autoscaling Local Storage: when enabled, this cluster dynamically acquires additional disk space when its Spark workers are running low on disk space. See [Autoscaling local storage](https://docs.microsoft.com/azure/databricks/clusters/configure#autoscaling-local-storage-azure) for details.',
    )
    instance_pool_id: Optional[str] = Field(
        None,
        description='The optional ID of the instance pool to which the cluster belongs. Refer to [Pools](https://docs.microsoft.com/azure/databricks/clusters/instance-pools/index) for details.',
    )
    state: Optional[ClusterState] = Field(None, description='State of the cluster.')
    state_message: Optional[str] = Field(
        None,
        description='A message associated with the most recent state transition (for example, the reason why the cluster entered a `TERMINATED` state). This field is unstructured, and its exact format is subject to change.',
    )
    start_time: Optional[int] = Field(
        None,
        description='Time (in epoch milliseconds) when the cluster creation request was received (when the cluster entered a `PENDING` state).',
    )
    terminated_time: Optional[int] = Field(
        None,
        description='Time (in epoch milliseconds) when the cluster was terminated, if applicable.',
    )
    last_state_loss_time: Optional[int] = Field(
        None,
        description='Time when the cluster driver last lost its state (due to a restart or driver failure).',
    )
    last_activity_time: Optional[int] = Field(
        None,
        description='Time (in epoch milliseconds) when the cluster was last active. A cluster is active if there is at least one command that has not finished on the cluster. This field is available after the cluster has reached a `RUNNING` state. Updates to this field are made as best-effort attempts. Certain versions of Spark do not support reporting of cluster activity. Refer to [Automatic termination](https://docs.microsoft.com/azure/databricks/clusters/clusters-manage#automatic-termination) for details.',
    )
    cluster_memory_mb: Optional[int] = Field(
        None, description='Total amount of cluster memory, in megabytes.'
    )
    cluster_cores: Optional[float] = Field(
        None,
        description='Number of CPU cores available for this cluster. This can be fractional since certain node types are configured to share cores between Spark nodes on the same instance.',
    )
    default_tags: Optional[ClusterTag] = Field(
        None,
        description='An object containing a set of tags that are added by Databricks regardless of any custom_tags, including:\n\n* Vendor: Databricks\n* Creator: <username-of-creator>\n* ClusterName: <name-of-cluster>\n* ClusterId: <id-of-cluster>\n* Name: <Databricks internal use>  \nOn job clusters:\n* RunName: <name-of-job>\n* JobId: <id-of-job>  \nOn resources used by Databricks SQL:\n* SqlEndpointId: <id-of-endpoint>',
    )
    cluster_log_status: Optional[LogSyncStatus] = Field(
        None, description='Cluster log delivery status.'
    )
    termination_reason: Optional[TerminationReason] = Field(
        None,
        description='Information about why the cluster was terminated. This field only appears when the cluster is in a `TERMINATING` or `TERMINATED` state.',
    )


class EventDetails(BaseModel):
    current_num_workers: Optional[int] = Field(
        None, description='The number of nodes in the cluster.'
    )
    target_num_workers: Optional[int] = Field(
        None, description='The targeted number of nodes in the cluster.'
    )
    previous_attributes: Optional[AzureAttributes] = Field(
        None, description='The cluster attributes before a cluster was edited.'
    )
    attributes: Optional[AzureAttributes] = Field(
        None,
        description='* For created clusters, the attributes of the cluster.\n* For edited clusters, the new attributes of the cluster.',
    )
    previous_cluster_size: Optional[ClusterSize] = Field(
        None, description='The size of the cluster before an edit or resize.'
    )
    cluster_size: Optional[ClusterSize] = Field(
        None,
        description='The cluster size that was set in the cluster creation or edit.',
    )
    cause: Optional[ResizeCause] = Field(
        None, description='The cause of a change in target size.'
    )
    reason: Optional[TerminationReason] = Field(
        None,
        description='A termination reason:\n\n* On a `TERMINATED` event, the reason for the termination.\n* On a `RESIZE_COMPLETE` event, indicates the reason that we failed to acquire some nodes.',
    )
    user: Optional[str] = Field(
        None,
        description='The user that caused the event to occur. (Empty if it was done by Azure Databricks.)',
    )


class ClusterAttributes(BaseModel):
    cluster_name: Optional[str] = Field(
        None,
        description='Cluster name requested by the user. This doesn’t have to be unique. If not specified at creation, the cluster name is an empty string.',
    )
    spark_version: Optional[str] = Field(
        None,
        description='The runtime version of the cluster, for example “5.0.x-scala2.11”. You can retrieve a list of available runtime versions by using the [Runtime versions](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/clusters#runtime-versions) API call.',
    )
    spark_conf: Optional[SparkConfPair] = Field(
        None,
        description='An object containing a set of optional, user-specified Spark configuration key-value pairs. You can also pass in a string of extra JVM options to the driver and the executors via `spark.driver.extraJavaOptions` and `spark.executor.extraJavaOptions` respectively.\n\nExample Spark confs: `{"spark.speculation": true, "spark.streaming.ui.retainedBatches": 5}` or `{"spark.driver.extraJavaOptions": "-verbose:gc -XX:+PrintGCDetails"}`',
    )
    azure_attributes: Optional[AzureAttributes] = Field(
        None,
        description='Defines attributes such as the instance availability type, node placement, and max bid price. If not specified during cluster creation, a set of default values is used.',
    )
    node_type_id: Optional[str] = Field(
        None,
        description='This field encodes, through a single value, the resources available to each of the Spark nodes in this cluster. For example, the Spark nodes can be provisioned and optimized for memory or compute intensive workloads A list of available node types can be retrieved by using the [List node types](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/clusters#list-node-types) API call.',
    )
    driver_node_type_id: Optional[str] = Field(
        None,
        description='The node type of the Spark driver. This field is optional; if unset, the driver node type is set as the same value as `node_type_id` defined above.',
    )
    ssh_public_keys: Optional[List[str]] = Field(None, description='')
    custom_tags: Optional[ClusterTag] = Field(None, description='')
    cluster_log_conf: Optional[ClusterLogConf] = Field(
        None,
        description='The configuration for delivering Spark logs to a long-term storage destination. Only one destination can be specified for one cluster. If the conf is given, the logs is delivered to the destination every `5 mins`. The destination of driver logs is `<destination>/<cluster-ID>/driver`, while the destination of executor logs is `<destination>/<cluster-ID>/executor`.',
    )
    init_scripts: Optional[List[InitScriptInfo]] = Field(
        None,
        description='The configuration for storing init scripts. Any number of destinations can be specified. The scripts are executed sequentially in the order provided. If `cluster_log_conf` is specified, init script logs are sent to `<destination>/<cluster-ID>/init_scripts`.',
    )
    docker_image: Optional[DockerImage] = Field(
        None,
        description='Docker image for a [custom container](https://docs.microsoft.com/azure/databricks/clusters/custom-containers).',
    )
    spark_env_vars: Optional[SparkEnvPair] = Field(
        None,
        description='An object containing a set of optional, user-specified environment variable key-value pairs. Key-value pairs of the form (X,Y) are exported as is (that is, `export X=\'Y\'`) while launching the driver and workers.\n\nIn order to specify an additional set of `SPARK_DAEMON_JAVA_OPTS`, we recommend appending them to `$SPARK_DAEMON_JAVA_OPTS` as shown in the following example. This ensures that all default databricks managed environmental variables are included as well.\n\nExample Spark environment variables: `{"SPARK_WORKER_MEMORY": "28000m", "SPARK_LOCAL_DIRS": "/local_disk0"}` or `{"SPARK_DAEMON_JAVA_OPTS": "$SPARK_DAEMON_JAVA_OPTS -Dspark.shuffle.service.enabled=true"}`',
    )
    autotermination_minutes: Optional[int] = Field(
        None,
        description='Automatically terminates the cluster after it is inactive for this time in minutes. If not set, this cluster is not be automatically terminated. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination.',
    )
    enable_elastic_disk: Optional[bool] = Field(
        None,
        description='Autoscaling Local Storage: when enabled, this cluster dynamically acquires additional disk space when its Spark workers are running low on disk space.null Refer to [Autoscaling local storage](https://docs.microsoft.com/azure/databricks/clusters/configure#autoscaling-local-storage) for details.',
    )
    instance_pool_id: Optional[str] = Field(
        None,
        description='The optional ID of the instance pool to which the cluster belongs. Refer to [Pools](https://docs.microsoft.com/azure/databricks/clusters/instance-pools/index) for details.',
    )
    cluster_source: Optional[ClusterSource] = Field(
        None,
        description='Determines whether the cluster was created by a user through the UI, created by the Databricks Jobs scheduler, or through an API request.',
    )
    policy_id: Optional[str] = Field(
        None,
        description='A [cluster policy](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/policies) ID.',
    )


class NodeType(BaseModel):
    node_type_id: str = Field(
        ..., description='Unique identifier for this node type. This field is required.'
    )
    memory_mb: int = Field(
        ...,
        description='Memory (in MB) available for this node type. This field is required.',
    )
    num_cores: Optional[float] = Field(
        None,
        description='Number of CPU cores available for this node type. This can be fractional if the number of cores on a machine instance is not divisible by the number of Spark nodes on that machine. This field is required.',
    )
    description: str = Field(
        ...,
        description='A string description associated with this node type. This field is required.',
    )
    instance_type_id: str = Field(
        ...,
        description='An identifier for the type of hardware that this node runs on. This field is required.',
    )
    is_deprecated: Optional[bool] = Field(
        None,
        description='Whether the node type is deprecated. Non-deprecated node types offer greater performance.',
    )
    node_info: Optional[ClusterCloudProviderNodeInfo] = Field(
        None, description='Node type info reported by the cloud provider.'
    )


class ClusterLibraryStatuses(BaseModel):
    cluster_id: Optional[str] = Field(
        None, description='Unique identifier for the cluster.'
    )
    library_statuses: Optional[List[LibraryFullStatus]] = Field(
        None, description='Status of all libraries on the cluster.'
    )


class AccessControlRequestForUser(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[PermissionLevel] = None


class AccessControlRequestForGroup(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[PermissionLevelForGroup] = None


class AccessControlRequestForServicePrincipal(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[PermissionLevel] = None


class RunSubmitTaskSettings(BaseModel):
    task_key: TaskKey
    depends_on: Optional[TaskDependencies] = None
    existing_cluster_id: Optional[str] = Field(
        None,
        description='If existing_cluster_id, the ID of an existing cluster that is used for all runs of this task. When running tasks on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.',
        example='0923-164208-meows279',
    )
    new_cluster: Optional[NewCluster] = Field(
        None,
        description='If new_cluster, a description of a cluster that is created for each run.',
    )
    notebook_task: Optional[NotebookTask] = Field(
        None,
        description='If notebook_task, indicates that this task must run a notebook. This field may not be specified in conjunction with spark_jar_task.',
    )
    spark_jar_task: Optional[SparkJarTask] = Field(
        None, description='If spark_jar_task, indicates that this task must run a JAR.'
    )
    spark_python_task: Optional[SparkPythonTask] = Field(
        None,
        description='If spark_python_task, indicates that this task must run a Python file.',
    )
    spark_submit_task: Optional[SparkSubmitTask] = Field(
        None,
        description='If spark_submit_task, indicates that this task must be launched by the spark submit script.',
    )
    pipeline_task: Optional[PipelineTask] = Field(
        None,
        description='If pipeline_task, indicates that this task must execute a Pipeline.',
    )
    python_wheel_task: Optional[PythonWheelTask] = Field(
        None,
        description='If python_wheel_task, indicates that this job must execute a PythonWheel.',
    )
    libraries: Optional[List[Library]] = Field(
        None,
        description='An optional list of libraries to be installed on the cluster that executes the task. The default value is an empty list.',
    )
    timeout_seconds: Optional[int] = Field(
        None,
        description='An optional timeout applied to each run of this job task. The default behavior is to have no timeout.',
        example=86400,
    )


class RunSubmitSettings(BaseModel):
    tasks: Optional[List[RunSubmitTaskSettings]] = Field(
        None,
        example=[
            {
                'task_key': 'Sessionize',
                'description': 'Extracts session data from events',
                'depends_on': [],
                'existing_cluster_id': '0923-164208-meows279',
                'spark_jar_task': {
                    'main_class_name': 'com.databricks.Sessionize',
                    'parameters': ['--data', 'dbfs:/path/to/data.json'],
                },
                'libraries': [{'jar': 'dbfs:/mnt/databricks/Sessionize.jar'}],
                'timeout_seconds': 86400,
            },
            {
                'task_key': 'Orders_Ingest',
                'description': 'Ingests order data',
                'depends_on': [],
                'existing_cluster_id': '0923-164208-meows279',
                'spark_jar_task': {
                    'main_class_name': 'com.databricks.OrdersIngest',
                    'parameters': ['--data', 'dbfs:/path/to/order-data.json'],
                },
                'libraries': [{'jar': 'dbfs:/mnt/databricks/OrderIngest.jar'}],
                'timeout_seconds': 86400,
            },
            {
                'task_key': 'Match',
                'description': 'Matches orders with user sessions',
                'depends_on': [
                    {'task_key': 'Orders_Ingest'},
                    {'task_key': 'Sessionize'},
                ],
                'new_cluster': {
                    'spark_version': '7.3.x-scala2.12',
                    'node_type_id': 'Standard_D3_v2',
                    'spark_conf': {'spark.speculation': True},
                    'azure_attributes': {'availability': 'SPOT_WITH_FALLBACK_AZURE'},
                    'autoscale': {'min_workers': 2, 'max_workers': 16},
                },
                'notebook_task': {
                    'notebook_path': '/Users/user.name@databricks.com/Match',
                    'base_parameters': {'name': 'John Doe', 'age': '35'},
                },
                'timeout_seconds': 86400,
            },
        ],
        max_items=100,
    )
    run_name: Optional[str] = Field(
        None,
        description='An optional name for the run. The default value is `Untitled`.',
        example='A multitask job run',
    )
    git_source: Optional[GitSource1] = Field(
        None,
        description="This functionality is in Public Preview.\n\nAn optional specification for a remote repository containing the notebooks used by this job's notebook tasks.",
    )
    timeout_seconds: Optional[int] = Field(
        None,
        description='An optional timeout applied to each run of this job. The default behavior is to have no timeout.',
        example=86400,
    )
    idempotency_token: Optional[str] = Field(
        None,
        description='An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead.\n\nIf you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token.\n\nThis token must have at most 64 characters.\n\nFor more information, see [How to ensure idempotency for jobs](https://docs.microsoft.com/azure/databricks/kb/jobs/jobs-idempotency).',
        example='8f018174-4792-40d5-bcbc-3e6a527352c8',
    )


class RepairHistory(BaseModel):
    repair_history: Optional[List[RepairHistoryItem]] = Field(
        None, description='The repair history of the run.'
    )


class ClusterSpec(BaseModel):
    existing_cluster_id: Optional[str] = Field(
        None,
        description='If existing_cluster_id, the ID of an existing cluster that is used for all runs of this job. When running jobs on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.',
        example='0923-164208-meows279',
    )
    new_cluster: Optional[NewCluster] = Field(
        None,
        description='If new_cluster, a description of a cluster that is created for each run.',
    )
    libraries: Optional[List[Library]] = Field(
        None,
        description='An optional list of libraries to be installed on the cluster that executes the job. The default value is an empty list.',
    )


class JobTaskSettings(BaseModel):
    task_key: TaskKey
    description: Optional[TaskDescription] = None
    depends_on: Optional[TaskDependencies] = None
    existing_cluster_id: Optional[str] = Field(
        None,
        description='If existing_cluster_id, the ID of an existing cluster that is used for all runs of this task. When running tasks on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.',
        example='0923-164208-meows279',
    )
    new_cluster: Optional[NewCluster] = Field(
        None,
        description='If new_cluster, a description of a cluster that is created for each run.',
    )
    job_cluster_key: Optional[
        constr(regex=r'^[\w\-]+$', min_length=1, max_length=100)
    ] = Field(
        None,
        description='If job_cluster_key, this task is executed reusing the cluster specified in `job.settings.job_clusters`.',
    )
    notebook_task: Optional[NotebookTask] = Field(
        None,
        description='If notebook_task, indicates that this task must run a notebook. This field may not be specified in conjunction with spark_jar_task.',
    )
    spark_jar_task: Optional[SparkJarTask] = Field(
        None, description='If spark_jar_task, indicates that this task must run a JAR.'
    )
    spark_python_task: Optional[SparkPythonTask] = Field(
        None,
        description='If spark_python_task, indicates that this task must run a Python file.',
    )
    spark_submit_task: Optional[SparkSubmitTask] = Field(
        None,
        description='If spark_submit_task, indicates that this task must be launched by the spark submit script.',
    )
    pipeline_task: Optional[PipelineTask] = Field(
        None,
        description='If pipeline_task, indicates that this task must execute a Pipeline.',
    )
    python_wheel_task: Optional[PythonWheelTask] = Field(
        None,
        description='If python_wheel_task, indicates that this job must execute a PythonWheel.',
    )
    libraries: Optional[List[Library]] = Field(
        None,
        description='An optional list of libraries to be installed on the cluster that executes the task. The default value is an empty list.',
    )
    email_notifications: Optional[JobEmailNotifications] = Field(
        None,
        description='An optional set of email addresses that is notified when runs of this task begin or complete as well as when this task is deleted. The default behavior is to not send any emails.',
    )
    timeout_seconds: Optional[int] = Field(
        None,
        description='An optional timeout applied to each run of this job task. The default behavior is to have no timeout.',
        example=86400,
    )
    max_retries: Optional[int] = Field(
        None,
        description='An optional maximum number of times to retry an unsuccessful run. A run is considered to be unsuccessful if it completes with the `FAILED` result_state or `INTERNAL_ERROR` `life_cycle_state`. The value -1 means to retry indefinitely and the value 0 means to never retry. The default behavior is to never retry.',
        example=10,
    )
    min_retry_interval_millis: Optional[int] = Field(
        None,
        description='An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.',
        example=2000,
    )
    retry_on_timeout: Optional[bool] = Field(
        None,
        description='An optional policy to specify whether to retry a task when it times out. The default behavior is to not retry on timeout.',
        example=True,
    )


class JobCluster(BaseModel):
    job_cluster_key: constr(regex=r'^[\w\-]+$', min_length=1, max_length=100) = Field(
        ...,
        description='A unique name for the job cluster. This field is required and must be unique within the job.\n`JobTaskSettings` may refer to this field to determine which cluster to launch for the task execution.',
        example='auto_scaling_cluster',
    )
    new_cluster: Optional[NewCluster] = None


class Run(BaseModel):
    job_id: Optional[int] = Field(
        None,
        description='The canonical identifier of the job that contains this run.',
        example=11223344,
    )
    run_id: Optional[int] = Field(
        None,
        description='The canonical identifier of the run. This ID is unique across all runs of all jobs.',
        example=455644833,
    )
    number_in_job: Optional[int] = Field(
        None,
        description='A unique identifier for this job run. This is set to the same value as `run_id`.',
        example=455644833,
    )
    creator_user_name: Optional[str] = Field(
        None,
        description='The creator user name. This field won’t be included in the response if the user has already been deleted.',
        example='user.name@databricks.com',
    )
    original_attempt_run_id: Optional[int] = Field(
        None,
        description='If this run is a retry of a prior run attempt, this field contains the run_id of the original attempt; otherwise, it is the same as the run_id.',
        example=455644833,
    )
    state: Optional[RunState] = Field(
        None, description='The result and lifecycle states of the run.'
    )
    schedule: Optional[CronSchedule] = Field(
        None,
        description='The cron schedule that triggered this run if it was triggered by the periodic scheduler.',
    )
    tasks: Optional[List[RunTask]] = Field(
        None,
        description='The list of tasks performed by the run. Each task has its own `run_id` which you can use to call `JobsGetOutput` to retrieve the run resutls.',
        example=[
            {
                'run_id': 2112892,
                'task_key': 'Orders_Ingest',
                'description': 'Ingests order data',
                'job_cluster_key': 'auto_scaling_cluster',
                'spark_jar_task': {
                    'main_class_name': 'com.databricks.OrdersIngest',
                    'run_as_repl': True,
                },
                'libraries': [{'jar': 'dbfs:/mnt/databricks/OrderIngest.jar'}],
                'state': {
                    'life_cycle_state': 'INTERNAL_ERROR',
                    'result_state': 'FAILED',
                    'state_message': "Library installation failed for library due to user error. Error messages:\n'Manage' permissions are required to install libraries on a cluster",
                    'user_cancelled_or_timedout': False,
                },
                'run_page_url': 'https://my-workspace.cloud.databricks.com/#job/39832/run/20',
                'start_time': 1629989929660,
                'setup_duration': 0,
                'execution_duration': 0,
                'cleanup_duration': 0,
                'end_time': 1629989930171,
                'cluster_instance': {
                    'cluster_id': '0923-164208-meows279',
                    'spark_context_id': '4348585301701786933',
                },
                'attempt_number': 0,
            },
            {
                'run_id': 2112897,
                'task_key': 'Match',
                'description': 'Matches orders with user sessions',
                'depends_on': [
                    {'task_key': 'Orders_Ingest'},
                    {'task_key': 'Sessionize'},
                ],
                'new_cluster': {
                    'spark_version': '7.3.x-scala2.12',
                    'node_type_id': 'Standard_D3_v2',
                    'spark_conf': {'spark.speculation': True},
                    'azure_attributes': {'availability': 'SPOT_WITH_FALLBACK_AZURE'},
                    'autoscale': {'min_workers': 2, 'max_workers': 16},
                },
                'notebook_task': {
                    'notebook_path': '/Users/user.name@databricks.com/Match'
                },
                'state': {
                    'life_cycle_state': 'SKIPPED',
                    'state_message': 'An upstream task failed.',
                    'user_cancelled_or_timedout': False,
                },
                'run_page_url': 'https://my-workspace.cloud.databricks.com/#job/39832/run/21',
                'start_time': 0,
                'setup_duration': 0,
                'execution_duration': 0,
                'cleanup_duration': 0,
                'end_time': 1629989930238,
                'cluster_instance': {'cluster_id': '0923-164208-meows279'},
                'attempt_number': 0,
            },
            {
                'run_id': 2112902,
                'task_key': 'Sessionize',
                'description': 'Extracts session data from events',
                'existing_cluster_id': '0923-164208-meows279',
                'spark_jar_task': {
                    'main_class_name': 'com.databricks.Sessionize',
                    'run_as_repl': True,
                },
                'libraries': [{'jar': 'dbfs:/mnt/databricks/Sessionize.jar'}],
                'state': {
                    'life_cycle_state': 'INTERNAL_ERROR',
                    'result_state': 'FAILED',
                    'state_message': "Library installation failed for library due to user error. Error messages:\n'Manage' permissions are required to install libraries on a cluster",
                    'user_cancelled_or_timedout': False,
                },
                'run_page_url': 'https://my-workspace.cloud.databricks.com/#job/39832/run/22',
                'start_time': 1629989929668,
                'setup_duration': 0,
                'execution_duration': 0,
                'cleanup_duration': 0,
                'end_time': 1629989930144,
                'cluster_instance': {
                    'cluster_id': '0923-164208-meows279',
                    'spark_context_id': '4348585301701786933',
                },
                'attempt_number': 0,
            },
        ],
        max_items=100,
    )
    job_clusters: Optional[List[JobCluster]] = Field(
        None,
        description='A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings.',
        example=[
            {
                'job_cluster_key': 'auto_scaling_cluster',
                'new_cluster': {
                    'spark_version': '7.3.x-scala2.12',
                    'node_type_id': 'Standard_D3_v2',
                    'spark_conf': {'spark.speculation': True},
                    'azure_attributes': {'availability': 'SPOT_WITH_FALLBACK_AZURE'},
                    'autoscale': {'min_workers': 2, 'max_workers': 16},
                },
            }
        ],
        max_items=100,
    )
    cluster_spec: Optional[ClusterSpec] = Field(
        None,
        description='A snapshot of the job’s cluster specification when this run was created.',
    )
    cluster_instance: Optional[ClusterInstance] = Field(
        None,
        description='The cluster used for this run. If the run is specified to use a new cluster, this field is set once the Jobs service has requested a cluster for the run.',
    )
    git_source: Optional[GitSource1] = Field(
        None,
        description="This functionality is in Public Preview.\n\nAn optional specification for a remote repository containing the notebooks used by this job's notebook tasks.",
    )
    overriding_parameters: Optional[RunParameters] = Field(
        None, description='The parameters used for this run.'
    )
    start_time: Optional[int] = Field(
        None,
        description='The time at which this run was started in epoch milliseconds (milliseconds since 1/1/1970 UTC). This may not be the time when the job task starts executing, for example, if the job is scheduled to run on a new cluster, this is the time the cluster creation call is issued.',
        example=1625060460483,
    )
    setup_duration: Optional[int] = Field(
        None,
        description='The time it took to set up the cluster in milliseconds. For runs that run on new clusters this is the cluster creation time, for runs that run on existing clusters this time should be very short.',
        example=0,
    )
    execution_duration: Optional[int] = Field(
        None,
        description='The time in milliseconds it took to execute the commands in the JAR or notebook until they completed, failed, timed out, were cancelled, or encountered an unexpected error.',
        example=0,
    )
    cleanup_duration: Optional[int] = Field(
        None,
        description='The time in milliseconds it took to terminate the cluster and clean up any associated artifacts. The total duration of the run is the sum of the setup_duration, the execution_duration, and the cleanup_duration.',
        example=0,
    )
    end_time: Optional[int] = Field(
        None,
        description='The time at which this run ended in epoch milliseconds (milliseconds since 1/1/1970 UTC). This field is set to 0 if the job is still running.',
        example=1625060863413,
    )
    trigger: Optional[TriggerType] = Field(
        None, description='The type of trigger that fired this run.'
    )
    run_name: Optional[str] = Field(
        'Untitled',
        description='An optional name for the run. The maximum allowed length is 4096 bytes in UTF-8 encoding.',
        example='A multitask job run',
    )
    run_page_url: Optional[str] = Field(
        None,
        description='The URL to the detail page of the run.',
        example='https://my-workspace.cloud.databricks.com/#job/11223344/run/123',
    )
    run_type: Optional[RunType] = None
    attempt_number: Optional[int] = Field(
        None,
        description='The sequence number of this run attempt for a triggered job run. The initial attempt of a run has an attempt_number of 0\\. If the initial run attempt fails, and the job has a retry policy (`max_retries` \\> 0), subsequent runs are created with an `original_attempt_run_id` of the original attempt’s ID and an incrementing `attempt_number`. Runs are retried only until they succeed, and the maximum `attempt_number` is the same as the `max_retries` value for the job.',
        example=0,
    )


class ClusterEvent(BaseModel):
    cluster_id: str = Field(
        ..., description='Canonical identifier for the cluster. This field is required.'
    )
    timestamp: Optional[int] = Field(
        None,
        description='The timestamp when the event occurred, stored as the number of milliseconds since the unix epoch. Assigned by the Timeline service.',
    )
    type: ClusterEventType = Field(
        ..., description='The event type. This field is required.'
    )
    details: EventDetails = Field(
        ..., description='The event details. This field is required.'
    )


class AccessControlRequest(BaseModel):
    __root__: Union[
        AccessControlRequestForUser,
        AccessControlRequestForGroup,
        AccessControlRequestForServicePrincipal,
    ]


class JobSettings(BaseModel):
    name: Optional[str] = Field(
        'Untitled',
        description='An optional name for the job.',
        example='A multitask job',
    )
    tags: Optional[Dict[str, Any]] = Field(
        '{}',
        description='A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job.',
        example={'cost-center': 'engineering', 'team': 'jobs'},
    )
    tasks: Optional[List[JobTaskSettings]] = Field(
        None,
        description='A list of task specifications to be executed by this job.',
        example=[
            {
                'task_key': 'Sessionize',
                'description': 'Extracts session data from events',
                'depends_on': [],
                'existing_cluster_id': '0923-164208-meows279',
                'spark_jar_task': {
                    'main_class_name': 'com.databricks.Sessionize',
                    'parameters': ['--data', 'dbfs:/path/to/data.json'],
                },
                'libraries': [{'jar': 'dbfs:/mnt/databricks/Sessionize.jar'}],
                'timeout_seconds': 86400,
                'max_retries': 3,
                'min_retry_interval_millis': 2000,
                'retry_on_timeout': False,
            },
            {
                'task_key': 'Orders_Ingest',
                'description': 'Ingests order data',
                'depends_on': [],
                'job_cluster_key': 'auto_scaling_cluster',
                'spark_jar_task': {
                    'main_class_name': 'com.databricks.OrdersIngest',
                    'parameters': ['--data', 'dbfs:/path/to/order-data.json'],
                },
                'libraries': [{'jar': 'dbfs:/mnt/databricks/OrderIngest.jar'}],
                'timeout_seconds': 86400,
                'max_retries': 3,
                'min_retry_interval_millis': 2000,
                'retry_on_timeout': False,
            },
            {
                'task_key': 'Match',
                'description': 'Matches orders with user sessions',
                'depends_on': [
                    {'task_key': 'Orders_Ingest'},
                    {'task_key': 'Sessionize'},
                ],
                'new_cluster': {
                    'spark_version': '7.3.x-scala2.12',
                    'node_type_id': 'Standard_D3_v2',
                    'spark_conf': {'spark.speculation': True},
                    'azure_attributes': {'availability': 'SPOT_WITH_FALLBACK_AZURE'},
                    'autoscale': {'min_workers': 2, 'max_workers': 16},
                },
                'notebook_task': {
                    'notebook_path': '/Users/user.name@databricks.com/Match',
                    'base_parameters': {'name': 'John Doe', 'age': '35'},
                },
                'timeout_seconds': 86400,
                'max_retries': 3,
                'min_retry_interval_millis': 2000,
                'retry_on_timeout': False,
            },
        ],
        max_items=100,
    )
    job_clusters: Optional[List[JobCluster]] = Field(
        None,
        description='A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings.',
        example=[
            {
                'job_cluster_key': 'auto_scaling_cluster',
                'new_cluster': {
                    'spark_version': '7.3.x-scala2.12',
                    'node_type_id': 'Standard_D3_v2',
                    'spark_conf': {'spark.speculation': True},
                    'azure_attributes': {'availability': 'SPOT_WITH_FALLBACK_AZURE'},
                    'autoscale': {'min_workers': 2, 'max_workers': 16},
                },
            }
        ],
        max_items=100,
    )
    email_notifications: Optional[JobEmailNotifications] = Field(
        None,
        description='An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails.',
    )
    timeout_seconds: Optional[int] = Field(
        None,
        description='An optional timeout applied to each run of this job. The default behavior is to have no timeout.',
        example=86400,
    )
    schedule: Optional[CronSchedule] = Field(
        None,
        description='An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking “Run Now” in the Jobs UI or sending an API request to `runNow`.',
    )
    max_concurrent_runs: Optional[int] = Field(
        None,
        description='An optional maximum allowed number of concurrent runs of the job.\n\nSet this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters.\n\nThis setting affects only new runs. For example, suppose the job’s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won’t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs.\n\nThis value cannot exceed 1000\\. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run.',
        example=10,
    )
    git_source: Optional[GitSource1] = Field(
        None,
        description="This functionality is in Public Preview.\n\nAn optional specification for a remote repository containing the notebooks used by this job's notebook tasks.",
    )
    format: Optional[Format] = Field(
        None,
        description='Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to `"MULTI_TASK"`.',
        example='MULTI_TASK',
    )


class AccessControlList(BaseModel):
    access_control_list: Optional[List[AccessControlRequest]] = Field(
        None, description='List of permissions to set on the job.'
    )


class Job(BaseModel):
    job_id: Optional[int] = Field(
        None, description='The canonical identifier for this job.', example=11223344
    )
    creator_user_name: Optional[str] = Field(
        None,
        description='The creator user name. This field won’t be included in the response if the user has already been deleted.',
        example='user.name@databricks.com',
    )
    run_as_user_name: Optional[str] = Field(
        None,
        description='The user name that the job runs as. `run_as_user_name` is based on the current job settings, and is set to the creator of the job if job access control is disabled, or the `is_owner` permission if job access control is enabled.',
        example='user.name@databricks.com',
    )
    settings: Optional[JobSettings] = Field(
        None,
        description='Settings for this job and all of its runs. These settings can be updated using the `resetJob` method.',
    )
    created_time: Optional[int] = Field(
        None,
        description='The time at which this job was created in epoch milliseconds (milliseconds since 1/1/1970 UTC).',
        example=1601370337343,
    )
