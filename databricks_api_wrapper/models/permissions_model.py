# generated by datamodel-codegen:
#   filename:  permissions-2.0-azure.yaml
#   timestamp: 2022-05-14T13:21:53+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field


class ObjectId(Enum):
    authorization_tokens = 'authorization/tokens'


class ObjectType(Enum):
    tokens = 'tokens'


class ClustersObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/clusters/0712-200003-rail519',
    )


class ClustersObjectType(Enum):
    cluster = 'cluster'


class InstancePoolObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/instance-pools/0627-190120-two15-pool-6wmqH7IJ',
    )


class InstancePoolObjectType(Enum):
    instance_pool = 'instance-pool'


class JobObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/jobs/123',
    )


class JobObjectType(Enum):
    job = 'job'


class PipelineObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/pipelines/123',
    )


class PipelineObjectType(Enum):
    pipeline = 'pipeline'


class NotebookObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/notebooks/108',
    )


class NotebookObjectType(Enum):
    notebook = 'notebook'


class DirectoryObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/directories/112',
    )


class DirectoryObjectType(Enum):
    directory = 'directory'


class ExperimentObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/experiments/2778373292881055',
    )


class ExperimentObjectType(Enum):
    experiment = 'experiment'


class RegisteredModelObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/registered-models/1234-5678-9012-3456',
    )


class RegisteredModelObjectType(Enum):
    registered_model = 'registered-model'


class SqlendpointsObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/endpoints/3930839871f3d4ef',
    )


class SqlendpointsObjectType(Enum):
    sqlendpoint = 'sqlendpoint'


class RepoObjectId(BaseModel):
    __root__: str = Field(
        ...,
        description='/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with other Databricks object permissions APIs.',
        example='/repos/108',
    )


class RepoObjectType(Enum):
    repo = 'repo'


class Inherited(BaseModel):
    __root__: bool = Field(
        ...,
        description='Specifies whether the permission is inherited from a parent ACL rather than set explicitly. See related property `inherited_from_object`.',
        example=False,
    )


class InheritedFromObject(BaseModel):
    __root__: List[str] = Field(
        ...,
        description='The list of parent ACL object IDs that contribute to inherited permission on an ACL object. This is only defined if related property `inherited` is set to `true`.',
        example='/<object-type>/',
    )


class PermissionLevel(Enum):
    CAN_MANAGE = 'CAN_MANAGE'


class Description(Enum):
    Permission_to_manage_this_object__Applies_to_clusters__pools__jobs__pipelines__notebooks__directories__registered_models__and_repos_ = 'Permission to manage this object. Applies to clusters, pools, jobs, pipelines, notebooks, directories, registered models, and repos.'


class CanManageObject(BaseModel):
    permission_level: Optional[PermissionLevel] = None
    description: Optional[Description] = None


class PermissionLevel1(Enum):
    CAN_USE = 'CAN_USE'


class Description1(Enum):
    Permission_to_use_this_object__Applies_to_tokens_ = (
        'Permission to use this object. Applies to tokens.'
    )


class CanUseObject(BaseModel):
    permission_level: Optional[PermissionLevel1] = None
    description: Optional[Description1] = None


class PermissionLevel2(Enum):
    CAN_RESTART = 'CAN_RESTART'


class Description2(Enum):
    Permission_to_restart_this_object__Applies_to_clusters_ = (
        'Permission to restart this object. Applies to clusters.'
    )


class CanRestartObject(BaseModel):
    permission_level: Optional[PermissionLevel2] = None
    description: Optional[Description2] = None


class PermissionLevel3(Enum):
    CAN_ATTACH_TO = 'CAN_ATTACH_TO'


class Description3(Enum):
    Permission_to_attach_to_this_object__Applies_to_clusters_and_pools_ = (
        'Permission to attach to this object. Applies to clusters and pools.'
    )


class CanAttachToObject(BaseModel):
    permission_level: Optional[PermissionLevel3] = None
    description: Optional[Description3] = None


class PermissionLevel4(Enum):
    IS_OWNER = 'IS_OWNER'


class Description4(Enum):
    Permission_that_represents_ownership_of_this_object__Applies_to_jobs_and_pipelines_ = 'Permission that represents ownership of this object. Applies to jobs and pipelines.'


class IsOwnerObject(BaseModel):
    permission_level: Optional[PermissionLevel4] = None
    description: Optional[Description4] = None


class PermissionLevel5(Enum):
    CAN_MANAGE_RUN = 'CAN_MANAGE_RUN'


class Description5(Enum):
    Permission_to_manage_or_run_this_object__Applies_to_jobs_ = (
        'Permission to manage or run this object. Applies to jobs.'
    )


class CanManageRunObject(BaseModel):
    permission_level: Optional[PermissionLevel5] = None
    description: Optional[Description5] = None


class PermissionLevel6(Enum):
    CAN_VIEW = 'CAN_VIEW'


class Description6(Enum):
    Permission_to_view_this_object__Applies_to_jobs_and_pipelines_ = (
        'Permission to view this object. Applies to jobs and pipelines.'
    )


class CanViewObject(BaseModel):
    permission_level: Optional[PermissionLevel6] = None
    description: Optional[Description6] = None


class PermissionLevel7(Enum):
    CAN_READ = 'CAN_READ'


class Description7(Enum):
    Permission_to_read_this_object__Applies_to_notebooks__directories__registered_models__and_repos_ = 'Permission to read this object. Applies to notebooks, directories, registered models, and repos.'


class CanReadObject(BaseModel):
    permission_level: Optional[PermissionLevel7] = None
    description: Optional[Description7] = None


class PermissionLevel8(Enum):
    CAN_RUN = 'CAN_RUN'


class Description8(Enum):
    Permission_to_run_this_object__Applies_to_notebooks__pipelines__directories__and_repos_ = 'Permission to run this object. Applies to notebooks, pipelines, directories, and repos.'


class CanRunObject(BaseModel):
    permission_level: Optional[PermissionLevel8] = None
    description: Optional[Description8] = None


class PermissionLevel9(Enum):
    CAN_EDIT = 'CAN_EDIT'


class Description9(Enum):
    Permission_to_edit_this_object__Applies_to_notebooks__directories__registered_models__and_repos_ = 'Permission to edit this object. Applies to notebooks, directories, registered models, and repos.'


class CanEditObject(BaseModel):
    permission_level: Optional[PermissionLevel9] = None
    description: Optional[Description9] = None


class PermissionLevel10(Enum):
    CAN_MANAGE_STAGING_VERSIONS = 'CAN_MANAGE_STAGING_VERSIONS'


class Description10(Enum):
    Permission_to_manage_staging_versions_of_this_object__Applies_to_registered_models_ = 'Permission to manage staging versions of this object. Applies to registered models.'


class CanManageStagingVersionsObject(BaseModel):
    permission_level: Optional[PermissionLevel10] = None
    description: Optional[Description10] = None


class PermissionLevel11(Enum):
    CAN_MANAGE_PRODUCTION_VERSIONS = 'CAN_MANAGE_PRODUCTION_VERSIONS'


class Description11(Enum):
    Permission_to_manage_production_versions_of_this_object__Applies_to_registered_models_ = 'Permission to manage production versions of this object. Applies to registered models.'


class CanManageProductionVersionsObject(BaseModel):
    permission_level: Optional[PermissionLevel11] = None
    description: Optional[Description11] = None


class TokensPermissionLevelForResponse(Enum):
    CAN_USE = 'CAN_USE'
    CAN_MANAGE = 'CAN_MANAGE'


class TokensPermissionLevelForPatch(Enum):
    CAN_USE = 'CAN_USE'


class TokensPermissionLevelForPut(Enum):
    CAN_USE = 'CAN_USE'
    CAN_MANAGE = 'CAN_MANAGE'


class CanManagePermissionsObjectResponse(BaseModel):
    permission_level: Optional[TokensPermissionLevelForResponse] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[List[str]] = Field(
        None,
        description='The list of parent ACL object IDs that contribute to inherited permission on an ACL object. This is only defined if related property `inherited` is set to `true`.',
        example='/<object-type>/',
    )


class CanManageAllPermissionsObjectResponse(BaseModel):
    __root__: List[CanManagePermissionsObjectResponse]


class CanManagePermissionLevel(Enum):
    CAN_MANAGE = 'CAN_MANAGE'


class UserName(BaseModel):
    __root__: str = Field(
        ..., description='Email address for a user.', example='jsmith@example.com'
    )


class TokensUserObjectForPatch(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[TokensPermissionLevelForPatch] = None


class TokensUserObjectForPut(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[TokensPermissionLevelForPut] = None


class GroupName(BaseModel):
    __root__: str = Field(
        ...,
        description='Group name. There are two built-in groups: `users` for all users, and `admins` for administrators.',
        example='users',
    )


class TokensGroupObjectForPatch(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[TokensPermissionLevelForPatch] = None


class TokensGroupObjectForPut(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[TokensPermissionLevelForPut] = None


class ServicePrincipalName(BaseModel):
    __root__: str = Field(
        ...,
        description='`applicationId` value (a GUID) that uniquely identifies an Azure service principal.',
        example='9f0621ee-b52b-11ea-b3de-0242ac130004',
    )


class TokensServicePrincipalObjectForPatch(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[TokensPermissionLevelForPatch] = None


class TokensServicePrincipalObjectForPut(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[TokensPermissionLevelForPut] = None


class TokensAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        TokensUserObjectForPatch,
        TokensGroupObjectForPatch,
        TokensServicePrincipalObjectForPatch,
    ]


class TokensAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        TokensUserObjectForPut,
        TokensGroupObjectForPut,
        TokensServicePrincipalObjectForPut,
    ]


class PatchTokenPermissionRequest(BaseModel):
    access_control_list: Optional[List[TokensAccessControlListsObjectForPatch]] = None


class PutTokenPermissionRequest(BaseModel):
    access_control_list: Optional[List[TokensAccessControlListsObjectForPut]] = None


class Error(BaseModel):
    error_code: Optional[str] = Field(None, description='Error code')
    message: Optional[str] = Field(
        None,
        description='Human-readable error message that describes the cause of the error.',
    )


class PermissionLevelObject(BaseModel):
    __root__: Union[CanManageObject, CanUseObject]


class ClustersPermissionLevelObject(BaseModel):
    __root__: Union[CanManageObject, CanRestartObject, CanAttachToObject] = Field(
        ..., example='CAN_RESTART'
    )


class InstancePoolsPermissionLevelObject(BaseModel):
    __root__: Union[CanManageObject, CanAttachToObject] = Field(
        ..., example='CAN_ATTACH_TO'
    )


class JobsPermissionLevelObject(BaseModel):
    __root__: Union[
        IsOwnerObject, CanManageRunObject, CanViewObject, CanManageObject
    ] = Field(..., example='CAN_VIEW')


class PipelinesPermissionLevelObject(BaseModel):
    __root__: Union[
        IsOwnerObject, CanManageObject, CanRunObject, CanViewObject
    ] = Field(..., example='CAN_VIEW')


class NotebooksPermissionLevelObject(BaseModel):
    __root__: Union[
        CanReadObject, CanRunObject, CanEditObject, CanManageObject
    ] = Field(..., example='CAN_RUN')


class DirectoriesPermissionLevelObject(BaseModel):
    __root__: Union[
        CanReadObject, CanRunObject, CanEditObject, CanManageObject
    ] = Field(..., example='CAN_MANAGE')


class ExperimentsPermissionLevelObject(BaseModel):
    __root__: Union[CanReadObject, CanEditObject, CanManageObject] = Field(
        ..., example='CAN_EDIT'
    )


class RegisteredModelsPermissionLevelObject(BaseModel):
    __root__: Union[
        CanReadObject,
        CanEditObject,
        CanManageStagingVersionsObject,
        CanManageProductionVersionsObject,
        CanManageObject,
    ] = Field(..., example='CAN_EDIT')


class SqlEndpointsPermissionLevelObject(BaseModel):
    __root__: Union[CanUseObject, CanManageObject] = Field(..., example='CAN_USE')


class ReposPermissionLevelObject(BaseModel):
    __root__: Union[
        CanReadObject, CanRunObject, CanEditObject, CanManageObject
    ] = Field(..., example='CAN_MANAGE')


class GetTokensPermissionLevels(BaseModel):
    permission_levels: Optional[List[PermissionLevelObject]] = None


class GetClustersPermissionLevels(BaseModel):
    permission_levels: Optional[List[ClustersPermissionLevelObject]] = None


class GetInstancePoolsPermissionLevels(BaseModel):
    permission_levels: Optional[List[InstancePoolsPermissionLevelObject]] = None


class GetJobsPermissionLevels(BaseModel):
    permission_levels: Optional[List[JobsPermissionLevelObject]] = None


class GetPipelinesPermissionLevels(BaseModel):
    permission_levels: Optional[List[PipelinesPermissionLevelObject]] = None


class GetNotebooksPermissionLevels(BaseModel):
    permission_levels: Optional[List[NotebooksPermissionLevelObject]] = None


class GetDirectoriesPermissionLevels(BaseModel):
    permission_levels: Optional[List[DirectoriesPermissionLevelObject]] = None


class GetExperimentsPermissionLevels(BaseModel):
    permission_levels: Optional[List[ExperimentsPermissionLevelObject]] = None


class GetRegisteredModelsPermissionLevels(BaseModel):
    permission_levels: Optional[List[RegisteredModelsPermissionLevelObject]] = None


class GetSqlEndpointsPermissionLevels(BaseModel):
    permission_levels: Optional[List[SqlEndpointsPermissionLevelObject]] = None


class GetReposPermissionLevels(BaseModel):
    permission_levels: Optional[List[ReposPermissionLevelObject]] = None


class TokensPermissionsObjectResponse(BaseModel):
    permission_level: Optional[TokensPermissionLevelForResponse] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class TokensAllPermissionsObjectResponse(BaseModel):
    __root__: List[TokensPermissionsObjectResponse]


class ClustersPermissionsObjectResponse(BaseModel):
    permission_level: Optional[ClustersPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class ClustersAllPermissionsObjectResponse(BaseModel):
    __root__: List[ClustersPermissionsObjectResponse]


class InstancePoolsPermissionsObjectResponse(BaseModel):
    permission_level: Optional[InstancePoolsPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class InstancePoolsAllPermissionsObjectResponse(BaseModel):
    __root__: List[InstancePoolsPermissionsObjectResponse]


class JobsPermissionsObjectResponse(BaseModel):
    permission_level: Optional[JobsPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class JobsAllPermissionsObjectResponse(BaseModel):
    __root__: List[JobsPermissionsObjectResponse]


class PipelinesPermissionsObjectResponse(BaseModel):
    permission_level: Optional[PipelinesPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class PipelinesAllPermissionsObjectResponse(BaseModel):
    __root__: List[PipelinesPermissionsObjectResponse]


class NotebooksPermissionsObjectResponse(BaseModel):
    permission_level: Optional[NotebooksPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class NotebooksAllPermissionsObjectResponse(BaseModel):
    __root__: List[NotebooksPermissionsObjectResponse]


class DirectoriesPermissionsObjectResponse(BaseModel):
    permission_level: Optional[DirectoriesPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class DirectoriesAllPermissionsObjectResponse(BaseModel):
    __root__: List[DirectoriesPermissionsObjectResponse]


class ExperimentsPermissionsObjectResponse(BaseModel):
    permission_level: Optional[ExperimentsPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class ExperimentsAllPermissionsObjectResponse(BaseModel):
    __root__: List[ExperimentsPermissionsObjectResponse]


class RegisteredModelsPermissionsObjectResponse(BaseModel):
    permission_level: Optional[RegisteredModelsPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class RegisteredModelsAllPermissionsObjectResponse(BaseModel):
    __root__: List[RegisteredModelsPermissionsObjectResponse]


class SqlEndpointsPermissionsObjectResponse(BaseModel):
    permission_level: Optional[SqlEndpointsPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class SqlEndpointsAllPermissionsObjectResponse(BaseModel):
    __root__: List[SqlEndpointsPermissionsObjectResponse]


class ReposPermissionsObjectResponse(BaseModel):
    permission_level: Optional[ReposPermissionLevelObject] = None
    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None


class ReposAllPermissionsObjectResponse(BaseModel):
    __root__: List[ReposPermissionsObjectResponse]


class TokensUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[TokensAllPermissionsObjectResponse] = None


class TokensGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[TokensAllPermissionsObjectResponse]] = None


class TokensServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[TokensAllPermissionsObjectResponse]] = None


class ClustersUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[ClustersAllPermissionsObjectResponse] = None


class ClustersUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[ClustersPermissionLevelObject] = None


class ClustersGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[ClustersAllPermissionsObjectResponse]] = None


class ClustersGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[ClustersPermissionLevelObject] = None


class ClustersServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[ClustersAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for an Azure service principal.'
    )


class ClustersServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[ClustersPermissionLevelObject] = None


class InstancePoolsUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[InstancePoolsAllPermissionsObjectResponse] = None


class InstancePoolsUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[InstancePoolsPermissionLevelObject] = None


class InstancePoolsGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[InstancePoolsAllPermissionsObjectResponse]] = None


class InstancePoolsGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[InstancePoolsPermissionLevelObject] = None


class InstancePoolsServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[InstancePoolsAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for an Azure service principal.'
    )


class InstancePoolsServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[InstancePoolsPermissionLevelObject] = None


class JobsUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[JobsAllPermissionsObjectResponse] = None


class JobsUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[JobsPermissionLevelObject] = None


class JobsGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[JobsAllPermissionsObjectResponse]] = None


class JobsGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[JobsPermissionLevelObject] = None


class JobsServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[JobsAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for an Azure service principal.'
    )


class JobsServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[JobsPermissionLevelObject] = None


class PipelinesUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[PipelinesAllPermissionsObjectResponse] = None


class PipelinesUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[PipelinesPermissionLevelObject] = None


class PipelinesGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[PipelinesAllPermissionsObjectResponse]] = None


class PipelinesGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[PipelinesPermissionLevelObject] = None


class PipelinesServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[PipelinesAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )


class PipelinesServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[PipelinesPermissionLevelObject] = None


class NotebooksUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[NotebooksAllPermissionsObjectResponse] = None


class NotebooksUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[NotebooksPermissionLevelObject] = None


class NotebooksGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[NotebooksAllPermissionsObjectResponse]] = None


class NotebooksGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[NotebooksPermissionLevelObject] = None


class NotebooksServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[NotebooksAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for an Azure service principal.'
    )


class NotebooksServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[NotebooksPermissionLevelObject] = None


class DirectoriesUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[DirectoriesAllPermissionsObjectResponse] = None


class DirectoriesUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[DirectoriesPermissionLevelObject] = None


class DirectoriesGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[DirectoriesAllPermissionsObjectResponse]] = None


class DirectoriesGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[DirectoriesPermissionLevelObject] = None


class DirectoriesServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[DirectoriesAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for an Azure service principal.'
    )


class DirectoriesServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[DirectoriesPermissionLevelObject] = None


class ExperimentsUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[ExperimentsAllPermissionsObjectResponse] = None


class ExperimentsUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[ExperimentsPermissionLevelObject] = None


class ExperimentsGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[ExperimentsAllPermissionsObjectResponse]] = None


class ExperimentsGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[ExperimentsPermissionLevelObject] = None


class ExperimentsServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[ExperimentsAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for an Azure service principal.'
    )


class ExperimentsServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[ExperimentsPermissionLevelObject] = None


class RegisteredModelsUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[RegisteredModelsAllPermissionsObjectResponse] = None


class RegisteredModelsUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[RegisteredModelsPermissionLevelObject] = None


class RegisteredModelsGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[RegisteredModelsAllPermissionsObjectResponse]] = None


class RegisteredModelsGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[RegisteredModelsPermissionLevelObject] = None


class RegisteredModelsServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[
        List[RegisteredModelsAllPermissionsObjectResponse]
    ] = Field(None, description='Permissions for an Azure service principal.')


class RegisteredModelsServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[RegisteredModelsPermissionLevelObject] = None


class SqlEndpointsUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[SqlEndpointsAllPermissionsObjectResponse] = None


class SqlEndpointsUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[SqlEndpointsPermissionLevelObject] = None


class SqlEndpointsGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[SqlEndpointsAllPermissionsObjectResponse]] = None


class SqlEndpointsGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[SqlEndpointsPermissionLevelObject] = None


class SqlEndpointsServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[SqlEndpointsAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for an Azure service principal.'
    )


class SqlEndpointsServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[SqlEndpointsPermissionLevelObject] = None


class ReposUserObjectForResponse(BaseModel):
    user_name: Optional[UserName] = None
    all_permissions: Optional[ReposAllPermissionsObjectResponse] = None


class ReposUserObject(BaseModel):
    user_name: Optional[UserName] = None
    permission_level: Optional[ReposPermissionLevelObject] = None


class ReposGroupObjectForResponse(BaseModel):
    group_name: Optional[GroupName] = None
    all_permissions: Optional[List[ReposAllPermissionsObjectResponse]] = None


class ReposGroupObject(BaseModel):
    group_name: Optional[GroupName] = None
    permission_level: Optional[ReposPermissionLevelObject] = None


class ReposServicePrincipalObjectForResponse(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    all_permissions: Optional[List[ReposAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for an Azure service principal.'
    )


class ReposServicePrincipalObject(BaseModel):
    service_principal_name: Optional[ServicePrincipalName] = None
    permission_level: Optional[ReposPermissionLevelObject] = None


class TokensAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        TokensUserObjectForResponse,
        TokensGroupObjectForResponse,
        TokensServicePrincipalObjectForResponse,
    ]


class ClustersAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        ClustersUserObjectForResponse,
        ClustersGroupObjectForResponse,
        ClustersServicePrincipalObjectForResponse,
    ]


class ClustersAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        ClustersUserObject, ClustersGroupObject, ClustersServicePrincipalObject
    ]


class ClustersAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        ClustersUserObject, ClustersGroupObject, ClustersServicePrincipalObject
    ]


class InstancePoolsAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        InstancePoolsUserObjectForResponse,
        InstancePoolsGroupObjectForResponse,
        InstancePoolsServicePrincipalObjectForResponse,
    ]


class InstancePoolsAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        InstancePoolsUserObject,
        InstancePoolsGroupObject,
        InstancePoolsServicePrincipalObject,
    ]


class InstancePoolsAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        InstancePoolsUserObject,
        InstancePoolsGroupObject,
        InstancePoolsServicePrincipalObject,
    ]


class JobsAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        JobsUserObjectForResponse,
        JobsGroupObjectForResponse,
        JobsServicePrincipalObjectForResponse,
    ]


class JobsAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[JobsUserObject, JobsGroupObject, JobsServicePrincipalObject]


class JobsAccessControlListsObjectForPut(BaseModel):
    __root__: Union[JobsUserObject, JobsGroupObject, JobsServicePrincipalObject]


class PipelinesAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        PipelinesUserObjectForResponse,
        PipelinesGroupObjectForResponse,
        PipelinesServicePrincipalObjectForResponse,
    ]


class PipelinesAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        PipelinesUserObject, PipelinesGroupObject, PipelinesServicePrincipalObject
    ]


class PipelinesAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        PipelinesUserObject, PipelinesGroupObject, PipelinesServicePrincipalObject
    ]


class NotebooksAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        NotebooksUserObjectForResponse,
        NotebooksGroupObjectForResponse,
        NotebooksServicePrincipalObjectForResponse,
    ]


class NotebooksAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        NotebooksUserObject, NotebooksGroupObject, NotebooksServicePrincipalObject
    ]


class NotebooksAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        NotebooksUserObject, NotebooksGroupObject, NotebooksServicePrincipalObject
    ]


class DirectoriesAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        DirectoriesUserObjectForResponse,
        DirectoriesGroupObjectForResponse,
        DirectoriesServicePrincipalObjectForResponse,
    ]


class DirectoriesAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        DirectoriesUserObject, DirectoriesGroupObject, DirectoriesServicePrincipalObject
    ]


class DirectoriesAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        DirectoriesUserObject, DirectoriesGroupObject, DirectoriesServicePrincipalObject
    ]


class ExperimentsAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        ExperimentsUserObjectForResponse,
        ExperimentsGroupObjectForResponse,
        ExperimentsServicePrincipalObjectForResponse,
    ]


class ExperimentsAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        ExperimentsUserObject, ExperimentsGroupObject, ExperimentsServicePrincipalObject
    ]


class ExperimentsAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        ExperimentsUserObject, ExperimentsGroupObject, ExperimentsServicePrincipalObject
    ]


class RegisteredModelsAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        RegisteredModelsUserObjectForResponse,
        RegisteredModelsGroupObjectForResponse,
        RegisteredModelsServicePrincipalObjectForResponse,
    ]


class RegisteredModelsAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        RegisteredModelsUserObject,
        RegisteredModelsGroupObject,
        RegisteredModelsServicePrincipalObject,
    ]


class RegisteredModelsAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        RegisteredModelsUserObject,
        RegisteredModelsGroupObject,
        RegisteredModelsServicePrincipalObject,
    ]


class SqlEndpointsAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        SqlEndpointsUserObjectForResponse,
        SqlEndpointsGroupObjectForResponse,
        SqlEndpointsServicePrincipalObjectForResponse,
    ]


class SqlEndpointsAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[
        SqlEndpointsUserObject,
        SqlEndpointsGroupObject,
        SqlEndpointsServicePrincipalObject,
    ]


class SqlEndpointsAccessControlListsObjectForPut(BaseModel):
    __root__: Union[
        SqlEndpointsUserObject,
        SqlEndpointsGroupObject,
        SqlEndpointsServicePrincipalObject,
    ]


class ReposAccessControlListsObjectForResponse(BaseModel):
    __root__: Union[
        ReposUserObjectForResponse,
        ReposGroupObjectForResponse,
        ReposServicePrincipalObjectForResponse,
    ]


class ReposAccessControlListsObjectForPatch(BaseModel):
    __root__: Union[ReposUserObject, ReposGroupObject, ReposServicePrincipalObject]


class ReposAccessControlListsObjectForPut(BaseModel):
    __root__: Union[ReposUserObject, ReposGroupObject, ReposServicePrincipalObject]


class GetTokensPermissionResponse(BaseModel):
    object_id: Optional[ObjectId] = None
    object_type: Optional[ObjectType] = None
    access_control_list: Optional[
        List[TokensAccessControlListsObjectForResponse]
    ] = None


class GetClustersPermissionResponse(BaseModel):
    object_id: Optional[ClustersObjectId] = None
    object_type: Optional[ClustersObjectType] = None
    access_control_list: Optional[
        List[ClustersAccessControlListsObjectForResponse]
    ] = None


class PatchClustersPermissionRequest(BaseModel):
    access_control_list: Optional[List[ClustersAccessControlListsObjectForPatch]] = None


class PutClustersPermissionRequest(BaseModel):
    access_control_list: Optional[List[ClustersAccessControlListsObjectForPut]] = None


class GetInstancePoolsPermissionResponse(BaseModel):
    object_id: Optional[InstancePoolObjectId] = None
    object_type: Optional[InstancePoolObjectType] = None
    access_control_list: Optional[
        List[InstancePoolsAccessControlListsObjectForResponse]
    ] = None


class PatchInstancePoolsPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[InstancePoolsAccessControlListsObjectForPatch]
    ] = None


class PutInstancePoolsPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[InstancePoolsAccessControlListsObjectForPut]
    ] = None


class GetJobsPermissionResponse(BaseModel):
    object_id: Optional[JobObjectId] = None
    object_type: Optional[JobObjectType] = None
    access_control_list: Optional[List[JobsAccessControlListsObjectForResponse]] = None


class PatchJobsPermissionRequest(BaseModel):
    access_control_list: Optional[List[JobsAccessControlListsObjectForPatch]] = None


class PutJobsPermissionRequest(BaseModel):
    access_control_list: Optional[List[JobsAccessControlListsObjectForPut]] = None


class GetPipelinesPermissionResponse(BaseModel):
    object_id: Optional[PipelineObjectId] = None
    object_type: Optional[PipelineObjectType] = None
    access_control_list: Optional[
        List[PipelinesAccessControlListsObjectForResponse]
    ] = None


class PatchPipelinesPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[PipelinesAccessControlListsObjectForPatch]
    ] = None


class PutPipelinesPermissionRequest(BaseModel):
    access_control_list: Optional[List[PipelinesAccessControlListsObjectForPut]] = None


class GetNotebooksPermissionResponse(BaseModel):
    object_id: Optional[NotebookObjectId] = None
    object_type: Optional[NotebookObjectType] = None
    access_control_list: Optional[
        List[NotebooksAccessControlListsObjectForResponse]
    ] = None


class PatchNotebooksPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[NotebooksAccessControlListsObjectForPatch]
    ] = None


class PutNotebooksPermissionRequest(BaseModel):
    access_control_list: Optional[List[NotebooksAccessControlListsObjectForPut]] = None


class GetDirectoriesPermissionResponse(BaseModel):
    object_id: Optional[DirectoryObjectId] = None
    object_type: Optional[DirectoryObjectType] = None
    access_control_list: Optional[
        List[DirectoriesAccessControlListsObjectForResponse]
    ] = None


class PatchDirectoriesPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[DirectoriesAccessControlListsObjectForPatch]
    ] = None


class PutDirectoriesPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[DirectoriesAccessControlListsObjectForPut]
    ] = None


class GetExperimentsPermissionResponse(BaseModel):
    object_id: Optional[ExperimentObjectId] = None
    object_type: Optional[ExperimentObjectType] = None
    access_control_list: Optional[
        List[ExperimentsAccessControlListsObjectForResponse]
    ] = None


class PatchExperimentsPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[ExperimentsAccessControlListsObjectForPatch]
    ] = None


class PutExperimentsPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[ExperimentsAccessControlListsObjectForPut]
    ] = None


class GetRegisteredModelsPermissionResponse(BaseModel):
    object_id: Optional[RegisteredModelObjectId] = None
    object_type: Optional[RegisteredModelObjectType] = None
    access_control_list: Optional[
        List[RegisteredModelsAccessControlListsObjectForResponse]
    ] = None


class PatchRegisteredModelsPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[RegisteredModelsAccessControlListsObjectForPatch]
    ] = None


class PutRegisteredModelsPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[RegisteredModelsAccessControlListsObjectForPut]
    ] = None


class GetSqlEndpointsPermissionResponse(BaseModel):
    object_id: Optional[SqlendpointsObjectId] = None
    object_type: Optional[SqlendpointsObjectType] = None
    access_control_list: Optional[
        List[SqlEndpointsAccessControlListsObjectForResponse]
    ] = None


class PatchSqlEndpointsPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[SqlEndpointsAccessControlListsObjectForPatch]
    ] = None


class PutSqlEndpointsPermissionRequest(BaseModel):
    access_control_list: Optional[
        List[SqlEndpointsAccessControlListsObjectForPut]
    ] = None


class GetReposPermissionResponse(BaseModel):
    object_id: Optional[RepoObjectId] = None
    object_type: Optional[RepoObjectType] = None
    access_control_list: Optional[List[ReposAccessControlListsObjectForResponse]] = None


class PatchReposPermissionRequest(BaseModel):
    access_control_list: Optional[List[ReposAccessControlListsObjectForPatch]] = None


class PutReposPermissionRequest(BaseModel):
    access_control_list: Optional[List[ReposAccessControlListsObjectForPut]] = None
